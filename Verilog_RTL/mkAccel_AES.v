//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_init                       O     1 const
// RDY_slave_rd_request_put       O     1 reg
// slave_rd_response_get          O    65 reg
// RDY_slave_rd_response_get      O     1 reg
// RDY_slave_wr_request_put       O     1 reg
// slave_wr_response_get          O     1 reg
// RDY_slave_wr_response_get      O     1 reg
// master_rd_request_get          O    64 reg
// RDY_master_rd_request_get      O     1 reg
// RDY_master_rd_response_put     O     1 reg
// master_wr_request_get          O   192 reg
// RDY_master_wr_request_get      O     1 reg
// RDY_master_wr_response_put     O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// init_base_addr                 I    64 reg
// slave_rd_request_put           I    64 reg
// slave_wr_request_put           I   128 reg
// master_rd_response_put         I   129 reg
// master_wr_response_put         I     1 reg
// EN_init                        I     1
// EN_slave_rd_request_put        I     1
// EN_slave_wr_request_put        I     1
// EN_master_rd_response_put      I     1
// EN_master_wr_response_put      I     1
// EN_slave_rd_response_get       I     1
// EN_slave_wr_response_get       I     1
// EN_master_rd_request_get       I     1
// EN_master_wr_request_get       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAccel_AES(CLK,
		   RST_N,

		   init_base_addr,
		   EN_init,
		   RDY_init,

		   slave_rd_request_put,
		   EN_slave_rd_request_put,
		   RDY_slave_rd_request_put,

		   EN_slave_rd_response_get,
		   slave_rd_response_get,
		   RDY_slave_rd_response_get,

		   slave_wr_request_put,
		   EN_slave_wr_request_put,
		   RDY_slave_wr_request_put,

		   EN_slave_wr_response_get,
		   slave_wr_response_get,
		   RDY_slave_wr_response_get,

		   EN_master_rd_request_get,
		   master_rd_request_get,
		   RDY_master_rd_request_get,

		   master_rd_response_put,
		   EN_master_rd_response_put,
		   RDY_master_rd_response_put,

		   EN_master_wr_request_get,
		   master_wr_request_get,
		   RDY_master_wr_request_get,

		   master_wr_response_put,
		   EN_master_wr_response_put,
		   RDY_master_wr_response_put);
  input  CLK;
  input  RST_N;

  // action method init
  input  [63 : 0] init_base_addr;
  input  EN_init;
  output RDY_init;

  // action method slave_rd_request_put
  input  [63 : 0] slave_rd_request_put;
  input  EN_slave_rd_request_put;
  output RDY_slave_rd_request_put;

  // actionvalue method slave_rd_response_get
  input  EN_slave_rd_response_get;
  output [64 : 0] slave_rd_response_get;
  output RDY_slave_rd_response_get;

  // action method slave_wr_request_put
  input  [127 : 0] slave_wr_request_put;
  input  EN_slave_wr_request_put;
  output RDY_slave_wr_request_put;

  // actionvalue method slave_wr_response_get
  input  EN_slave_wr_response_get;
  output slave_wr_response_get;
  output RDY_slave_wr_response_get;

  // actionvalue method master_rd_request_get
  input  EN_master_rd_request_get;
  output [63 : 0] master_rd_request_get;
  output RDY_master_rd_request_get;

  // action method master_rd_response_put
  input  [128 : 0] master_rd_response_put;
  input  EN_master_rd_response_put;
  output RDY_master_rd_response_put;

  // actionvalue method master_wr_request_get
  input  EN_master_wr_request_get;
  output [191 : 0] master_wr_request_get;
  output RDY_master_wr_request_get;

  // action method master_wr_response_put
  input  master_wr_response_put;
  input  EN_master_wr_response_put;
  output RDY_master_wr_response_put;

  // signals for module outputs
  wire [191 : 0] master_wr_request_get;
  wire [64 : 0] slave_rd_response_get;
  wire [63 : 0] master_rd_request_get;
  wire RDY_init,
       RDY_master_rd_request_get,
       RDY_master_rd_response_put,
       RDY_master_wr_request_get,
       RDY_master_wr_response_put,
       RDY_slave_rd_request_put,
       RDY_slave_rd_response_get,
       RDY_slave_wr_request_put,
       RDY_slave_wr_response_get,
       slave_wr_response_get;

  // inlined wires
  wire fsm_encrypt_decrypt_par_blocks_1_start_wire$whas,
       fsm_encrypt_decrypt_par_blocks_1_state_set_pw$whas,
       fsm_encrypt_decrypt_par_blocks_2_start_wire$whas,
       fsm_encrypt_decrypt_par_blocks_2_state_set_pw$whas,
       fsm_encrypt_decrypt_par_blocks_3_start_wire$whas,
       fsm_encrypt_decrypt_par_blocks_3_state_set_pw$whas,
       fsm_encrypt_decrypt_par_blocks_start_wire$whas,
       fsm_encrypt_decrypt_par_blocks_state_set_pw$whas,
       fsm_encrypt_decrypt_par_running$whas,
       fsm_encrypt_decrypt_start_wire$whas,
       fsm_encrypt_decrypt_state_set_pw$whas,
       fsm_key_expand_par_blocks_1_start_wire$whas,
       fsm_key_expand_par_blocks_1_state_set_pw$whas,
       fsm_key_expand_par_blocks_start_wire$whas,
       fsm_key_expand_par_running$whas,
       fsm_key_expand_start_wire$whas,
       fsm_key_expand_state_set_pw$whas;

  // register fsm_encrypt_decrypt_par_blocks_1_start_reg
  reg fsm_encrypt_decrypt_par_blocks_1_start_reg;
  wire fsm_encrypt_decrypt_par_blocks_1_start_reg$D_IN,
       fsm_encrypt_decrypt_par_blocks_1_start_reg$EN;

  // register fsm_encrypt_decrypt_par_blocks_1_state_can_overlap
  reg fsm_encrypt_decrypt_par_blocks_1_state_can_overlap;
  wire fsm_encrypt_decrypt_par_blocks_1_state_can_overlap$D_IN,
       fsm_encrypt_decrypt_par_blocks_1_state_can_overlap$EN;

  // register fsm_encrypt_decrypt_par_blocks_1_state_fired
  reg fsm_encrypt_decrypt_par_blocks_1_state_fired;
  wire fsm_encrypt_decrypt_par_blocks_1_state_fired$D_IN,
       fsm_encrypt_decrypt_par_blocks_1_state_fired$EN;

  // register fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate;
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN;
  wire fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$EN;

  // register fsm_encrypt_decrypt_par_blocks_2_start_reg
  reg fsm_encrypt_decrypt_par_blocks_2_start_reg;
  wire fsm_encrypt_decrypt_par_blocks_2_start_reg$D_IN,
       fsm_encrypt_decrypt_par_blocks_2_start_reg$EN;

  // register fsm_encrypt_decrypt_par_blocks_2_state_can_overlap
  reg fsm_encrypt_decrypt_par_blocks_2_state_can_overlap;
  wire fsm_encrypt_decrypt_par_blocks_2_state_can_overlap$D_IN,
       fsm_encrypt_decrypt_par_blocks_2_state_can_overlap$EN;

  // register fsm_encrypt_decrypt_par_blocks_2_state_fired
  reg fsm_encrypt_decrypt_par_blocks_2_state_fired;
  wire fsm_encrypt_decrypt_par_blocks_2_state_fired$D_IN,
       fsm_encrypt_decrypt_par_blocks_2_state_fired$EN;

  // register fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate;
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN;
  wire fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$EN;

  // register fsm_encrypt_decrypt_par_blocks_3_start_reg
  reg fsm_encrypt_decrypt_par_blocks_3_start_reg;
  wire fsm_encrypt_decrypt_par_blocks_3_start_reg$D_IN,
       fsm_encrypt_decrypt_par_blocks_3_start_reg$EN;

  // register fsm_encrypt_decrypt_par_blocks_3_state_can_overlap
  reg fsm_encrypt_decrypt_par_blocks_3_state_can_overlap;
  wire fsm_encrypt_decrypt_par_blocks_3_state_can_overlap$D_IN,
       fsm_encrypt_decrypt_par_blocks_3_state_can_overlap$EN;

  // register fsm_encrypt_decrypt_par_blocks_3_state_fired
  reg fsm_encrypt_decrypt_par_blocks_3_state_fired;
  wire fsm_encrypt_decrypt_par_blocks_3_state_fired$D_IN,
       fsm_encrypt_decrypt_par_blocks_3_state_fired$EN;

  // register fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate;
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN;
  wire fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$EN;

  // register fsm_encrypt_decrypt_par_blocks_start_reg
  reg fsm_encrypt_decrypt_par_blocks_start_reg;
  wire fsm_encrypt_decrypt_par_blocks_start_reg$D_IN,
       fsm_encrypt_decrypt_par_blocks_start_reg$EN;

  // register fsm_encrypt_decrypt_par_blocks_state_can_overlap
  reg fsm_encrypt_decrypt_par_blocks_state_can_overlap;
  wire fsm_encrypt_decrypt_par_blocks_state_can_overlap$D_IN,
       fsm_encrypt_decrypt_par_blocks_state_can_overlap$EN;

  // register fsm_encrypt_decrypt_par_blocks_state_fired
  reg fsm_encrypt_decrypt_par_blocks_state_fired;
  wire fsm_encrypt_decrypt_par_blocks_state_fired$D_IN,
       fsm_encrypt_decrypt_par_blocks_state_fired$EN;

  // register fsm_encrypt_decrypt_par_blocks_state_mkFSMstate
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_state_mkFSMstate;
  reg [2 : 0] fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN;
  wire fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$EN;

  // register fsm_encrypt_decrypt_start_reg
  reg fsm_encrypt_decrypt_start_reg;
  wire fsm_encrypt_decrypt_start_reg$D_IN, fsm_encrypt_decrypt_start_reg$EN;

  // register fsm_encrypt_decrypt_start_reg_1
  reg fsm_encrypt_decrypt_start_reg_1;
  wire fsm_encrypt_decrypt_start_reg_1$D_IN,
       fsm_encrypt_decrypt_start_reg_1$EN;

  // register fsm_encrypt_decrypt_state_can_overlap
  reg fsm_encrypt_decrypt_state_can_overlap;
  wire fsm_encrypt_decrypt_state_can_overlap$D_IN,
       fsm_encrypt_decrypt_state_can_overlap$EN;

  // register fsm_encrypt_decrypt_state_fired
  reg fsm_encrypt_decrypt_state_fired;
  wire fsm_encrypt_decrypt_state_fired$D_IN,
       fsm_encrypt_decrypt_state_fired$EN;

  // register fsm_encrypt_decrypt_state_mkFSMstate
  reg [2 : 0] fsm_encrypt_decrypt_state_mkFSMstate;
  reg [2 : 0] fsm_encrypt_decrypt_state_mkFSMstate$D_IN;
  wire fsm_encrypt_decrypt_state_mkFSMstate$EN;

  // register fsm_key_expand_par_blocks_1_start_reg
  reg fsm_key_expand_par_blocks_1_start_reg;
  wire fsm_key_expand_par_blocks_1_start_reg$D_IN,
       fsm_key_expand_par_blocks_1_start_reg$EN;

  // register fsm_key_expand_par_blocks_1_state_can_overlap
  reg fsm_key_expand_par_blocks_1_state_can_overlap;
  wire fsm_key_expand_par_blocks_1_state_can_overlap$D_IN,
       fsm_key_expand_par_blocks_1_state_can_overlap$EN;

  // register fsm_key_expand_par_blocks_1_state_fired
  reg fsm_key_expand_par_blocks_1_state_fired;
  wire fsm_key_expand_par_blocks_1_state_fired$D_IN,
       fsm_key_expand_par_blocks_1_state_fired$EN;

  // register fsm_key_expand_par_blocks_1_state_mkFSMstate
  reg [2 : 0] fsm_key_expand_par_blocks_1_state_mkFSMstate;
  reg [2 : 0] fsm_key_expand_par_blocks_1_state_mkFSMstate$D_IN;
  wire fsm_key_expand_par_blocks_1_state_mkFSMstate$EN;

  // register fsm_key_expand_par_blocks_fired
  reg fsm_key_expand_par_blocks_fired;
  wire fsm_key_expand_par_blocks_fired$D_IN,
       fsm_key_expand_par_blocks_fired$EN;

  // register fsm_key_expand_par_blocks_start_reg
  reg fsm_key_expand_par_blocks_start_reg;
  wire fsm_key_expand_par_blocks_start_reg$D_IN,
       fsm_key_expand_par_blocks_start_reg$EN;

  // register fsm_key_expand_start_reg
  reg fsm_key_expand_start_reg;
  wire fsm_key_expand_start_reg$D_IN, fsm_key_expand_start_reg$EN;

  // register fsm_key_expand_start_reg_1
  reg fsm_key_expand_start_reg_1;
  wire fsm_key_expand_start_reg_1$D_IN, fsm_key_expand_start_reg_1$EN;

  // register fsm_key_expand_state_can_overlap
  reg fsm_key_expand_state_can_overlap;
  wire fsm_key_expand_state_can_overlap$D_IN,
       fsm_key_expand_state_can_overlap$EN;

  // register fsm_key_expand_state_fired
  reg fsm_key_expand_state_fired;
  wire fsm_key_expand_state_fired$D_IN, fsm_key_expand_state_fired$EN;

  // register fsm_key_expand_state_mkFSMstate
  reg [2 : 0] fsm_key_expand_state_mkFSMstate;
  reg [2 : 0] fsm_key_expand_state_mkFSMstate$D_IN;
  wire fsm_key_expand_state_mkFSMstate$EN;

  // register rg_addr1
  reg [63 : 0] rg_addr1;
  wire [63 : 0] rg_addr1$D_IN;
  wire rg_addr1$EN;

  // register rg_addr3
  reg [63 : 0] rg_addr3;
  wire [63 : 0] rg_addr3$D_IN;
  wire rg_addr3$EN;

  // register rg_b1
  reg [63 : 0] rg_b1;
  wire [63 : 0] rg_b1$D_IN;
  wire rg_b1$EN;

  // register rg_b2
  reg [63 : 0] rg_b2;
  wire [63 : 0] rg_b2$D_IN;
  wire rg_b2$EN;

  // register rg_b3
  reg [63 : 0] rg_b3;
  wire [63 : 0] rg_b3$D_IN;
  wire rg_b3$EN;

  // register rg_b4
  reg [63 : 0] rg_b4;
  wire [63 : 0] rg_b4$D_IN;
  wire rg_b4$EN;

  // register rg_base_addr
  reg [63 : 0] rg_base_addr;
  wire [63 : 0] rg_base_addr$D_IN;
  wire rg_base_addr$EN;

  // register rg_buf2
  reg [127 : 0] rg_buf2;
  wire [127 : 0] rg_buf2$D_IN;
  wire rg_buf2$EN;

  // register rg_cmd
  reg [1 : 0] rg_cmd;
  wire [1 : 0] rg_cmd$D_IN;
  wire rg_cmd$EN;

  // register rg_dst_addr
  reg [63 : 0] rg_dst_addr;
  wire [63 : 0] rg_dst_addr$D_IN;
  wire rg_dst_addr$EN;

  // register rg_key_addr
  reg [63 : 0] rg_key_addr;
  wire [63 : 0] rg_key_addr$D_IN;
  wire rg_key_addr$EN;

  // register rg_n_blocks
  reg [63 : 0] rg_n_blocks;
  wire [63 : 0] rg_n_blocks$D_IN;
  wire rg_n_blocks$EN;

  // register rg_src_addr
  reg [63 : 0] rg_src_addr;
  wire [63 : 0] rg_src_addr$D_IN;
  wire rg_src_addr$EN;

  // register rg_status
  reg [3 : 0] rg_status;
  reg [3 : 0] rg_status$D_IN;
  wire rg_status$EN;

  // ports of submodule aes_e_d
  wire [127 : 0] aes_e_d$decrypt_request_put,
		 aes_e_d$decrypt_response_get,
		 aes_e_d$encrypt_request_put,
		 aes_e_d$encrypt_response_get,
		 aes_e_d$set_key_key;
  wire aes_e_d$EN_decrypt_request_put,
       aes_e_d$EN_decrypt_response_get,
       aes_e_d$EN_encrypt_request_put,
       aes_e_d$EN_encrypt_response_get,
       aes_e_d$EN_set_key,
       aes_e_d$RDY_decrypt_request_put,
       aes_e_d$RDY_decrypt_response_get,
       aes_e_d$RDY_encrypt_request_put,
       aes_e_d$RDY_encrypt_response_get,
       aes_e_d$RDY_set_key,
       aes_e_d$key_ready;

  // ports of submodule f_cmd
  wire [1 : 0] f_cmd$D_IN, f_cmd$D_OUT;
  wire f_cmd$CLR, f_cmd$DEQ, f_cmd$EMPTY_N, f_cmd$ENQ, f_cmd$FULL_N;

  // ports of submodule f_master_rd_reqs
  wire [63 : 0] f_master_rd_reqs$D_IN, f_master_rd_reqs$D_OUT;
  wire f_master_rd_reqs$CLR,
       f_master_rd_reqs$DEQ,
       f_master_rd_reqs$EMPTY_N,
       f_master_rd_reqs$ENQ,
       f_master_rd_reqs$FULL_N;

  // ports of submodule f_master_rd_rsps
  wire [128 : 0] f_master_rd_rsps$D_IN, f_master_rd_rsps$D_OUT;
  wire f_master_rd_rsps$CLR,
       f_master_rd_rsps$DEQ,
       f_master_rd_rsps$EMPTY_N,
       f_master_rd_rsps$ENQ,
       f_master_rd_rsps$FULL_N;

  // ports of submodule f_master_wr_reqs
  wire [191 : 0] f_master_wr_reqs$D_IN, f_master_wr_reqs$D_OUT;
  wire f_master_wr_reqs$CLR,
       f_master_wr_reqs$DEQ,
       f_master_wr_reqs$EMPTY_N,
       f_master_wr_reqs$ENQ,
       f_master_wr_reqs$FULL_N;

  // ports of submodule f_master_wr_rsps
  wire f_master_wr_rsps$CLR,
       f_master_wr_rsps$DEQ,
       f_master_wr_rsps$D_IN,
       f_master_wr_rsps$D_OUT,
       f_master_wr_rsps$EMPTY_N,
       f_master_wr_rsps$ENQ,
       f_master_wr_rsps$FULL_N;

  // ports of submodule f_slave_rd_reqs
  wire [63 : 0] f_slave_rd_reqs$D_IN, f_slave_rd_reqs$D_OUT;
  wire f_slave_rd_reqs$CLR,
       f_slave_rd_reqs$DEQ,
       f_slave_rd_reqs$EMPTY_N,
       f_slave_rd_reqs$ENQ,
       f_slave_rd_reqs$FULL_N;

  // ports of submodule f_slave_rd_rsps
  wire [64 : 0] f_slave_rd_rsps$D_IN, f_slave_rd_rsps$D_OUT;
  wire f_slave_rd_rsps$CLR,
       f_slave_rd_rsps$DEQ,
       f_slave_rd_rsps$EMPTY_N,
       f_slave_rd_rsps$ENQ,
       f_slave_rd_rsps$FULL_N;

  // ports of submodule f_slave_wr_reqs
  wire [127 : 0] f_slave_wr_reqs$D_IN, f_slave_wr_reqs$D_OUT;
  wire f_slave_wr_reqs$CLR,
       f_slave_wr_reqs$DEQ,
       f_slave_wr_reqs$EMPTY_N,
       f_slave_wr_reqs$ENQ,
       f_slave_wr_reqs$FULL_N;

  // ports of submodule f_slave_wr_rsps
  wire f_slave_wr_rsps$CLR,
       f_slave_wr_rsps$DEQ,
       f_slave_wr_rsps$D_IN,
       f_slave_wr_rsps$D_OUT,
       f_slave_wr_rsps$EMPTY_N,
       f_slave_wr_rsps$ENQ,
       f_slave_wr_rsps$FULL_N;

  // ports of submodule f_tokens
  wire f_tokens$CLR,
       f_tokens$DEQ,
       f_tokens$EMPTY_N,
       f_tokens$ENQ,
       f_tokens$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l342c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l408c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l326c18,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l328c12,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l343c12,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l379c18,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l381c12,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l408c67,
       CAN_FIRE_RL_fsm_encrypt_decrypt_action_l438c20,
       CAN_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10,
       CAN_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10,
       CAN_FIRE_RL_fsm_encrypt_decrypt_fsm_start,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38,
       CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_restart,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_every,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_handle_abort,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_restart,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_every,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_handle_abort,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_restart,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_every,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_handle_abort,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_restart,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_every,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_handle_abort,
       CAN_FIRE_RL_fsm_encrypt_decrypt_restart,
       CAN_FIRE_RL_fsm_encrypt_decrypt_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_state_every,
       CAN_FIRE_RL_fsm_encrypt_decrypt_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_encrypt_decrypt_state_handle_abort,
       CAN_FIRE_RL_fsm_key_expand_action_l288c13,
       CAN_FIRE_RL_fsm_key_expand_action_l297c16,
       CAN_FIRE_RL_fsm_key_expand_action_l311c16,
       CAN_FIRE_RL_fsm_key_expand_actionpar_run_l286c10,
       CAN_FIRE_RL_fsm_key_expand_actionpar_start_l286c10,
       CAN_FIRE_RL_fsm_key_expand_fsm_start,
       CAN_FIRE_RL_fsm_key_expand_idle_l286c10,
       CAN_FIRE_RL_fsm_key_expand_idle_l286c10_1,
       CAN_FIRE_RL_fsm_key_expand_idle_l295c13,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_1_restart,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_1_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_1_state_every,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_1_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_1_state_handle_abort,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_fired__dreg_update,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_restart,
       CAN_FIRE_RL_fsm_key_expand_par_blocks_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_key_expand_restart,
       CAN_FIRE_RL_fsm_key_expand_start_reg__dreg_update,
       CAN_FIRE_RL_fsm_key_expand_state_every,
       CAN_FIRE_RL_fsm_key_expand_state_fired__dreg_update,
       CAN_FIRE_RL_fsm_key_expand_state_handle_abort,
       CAN_FIRE_RL_rl_do_command,
       CAN_FIRE_RL_rl_rd_config,
       CAN_FIRE_RL_rl_wr_config,
       CAN_FIRE___me_check_15,
       CAN_FIRE___me_check_49,
       CAN_FIRE___me_check_50,
       CAN_FIRE___me_check_52,
       CAN_FIRE___me_check_53,
       CAN_FIRE___me_check_54,
       CAN_FIRE___me_check_56,
       CAN_FIRE___me_check_57,
       CAN_FIRE___me_check_59,
       CAN_FIRE___me_check_60,
       CAN_FIRE___me_check_61,
       CAN_FIRE_init,
       CAN_FIRE_master_rd_request_get,
       CAN_FIRE_master_rd_response_put,
       CAN_FIRE_master_wr_request_get,
       CAN_FIRE_master_wr_response_put,
       CAN_FIRE_slave_rd_request_put,
       CAN_FIRE_slave_rd_response_get,
       CAN_FIRE_slave_wr_request_put,
       CAN_FIRE_slave_wr_response_get,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l342c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l408c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l326c18,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l379c18,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67,
       WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20,
       WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10,
       WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10,
       WILL_FIRE_RL_fsm_encrypt_decrypt_fsm_start,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38,
       WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_restart,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_every,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_handle_abort,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_restart,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_every,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_handle_abort,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_restart,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_every,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_handle_abort,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_restart,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_every,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_handle_abort,
       WILL_FIRE_RL_fsm_encrypt_decrypt_restart,
       WILL_FIRE_RL_fsm_encrypt_decrypt_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_state_every,
       WILL_FIRE_RL_fsm_encrypt_decrypt_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_encrypt_decrypt_state_handle_abort,
       WILL_FIRE_RL_fsm_key_expand_action_l288c13,
       WILL_FIRE_RL_fsm_key_expand_action_l297c16,
       WILL_FIRE_RL_fsm_key_expand_action_l311c16,
       WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10,
       WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10,
       WILL_FIRE_RL_fsm_key_expand_fsm_start,
       WILL_FIRE_RL_fsm_key_expand_idle_l286c10,
       WILL_FIRE_RL_fsm_key_expand_idle_l286c10_1,
       WILL_FIRE_RL_fsm_key_expand_idle_l295c13,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_1_restart,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_1_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_1_state_every,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_1_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_1_state_handle_abort,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_fired__dreg_update,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_restart,
       WILL_FIRE_RL_fsm_key_expand_par_blocks_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_key_expand_restart,
       WILL_FIRE_RL_fsm_key_expand_start_reg__dreg_update,
       WILL_FIRE_RL_fsm_key_expand_state_every,
       WILL_FIRE_RL_fsm_key_expand_state_fired__dreg_update,
       WILL_FIRE_RL_fsm_key_expand_state_handle_abort,
       WILL_FIRE_RL_rl_do_command,
       WILL_FIRE_RL_rl_rd_config,
       WILL_FIRE_RL_rl_wr_config,
       WILL_FIRE___me_check_15,
       WILL_FIRE___me_check_49,
       WILL_FIRE___me_check_50,
       WILL_FIRE___me_check_52,
       WILL_FIRE___me_check_53,
       WILL_FIRE___me_check_54,
       WILL_FIRE___me_check_56,
       WILL_FIRE___me_check_57,
       WILL_FIRE___me_check_59,
       WILL_FIRE___me_check_60,
       WILL_FIRE___me_check_61,
       WILL_FIRE_init,
       WILL_FIRE_master_rd_request_get,
       WILL_FIRE_master_rd_response_put,
       WILL_FIRE_master_wr_request_get,
       WILL_FIRE_master_wr_response_put,
       WILL_FIRE_slave_rd_request_put,
       WILL_FIRE_slave_rd_response_get,
       WILL_FIRE_slave_wr_request_put,
       WILL_FIRE_slave_wr_response_get;

  // inputs to muxes for submodule ports
  reg [3 : 0] MUX_rg_status$write_1__VAL_4, MUX_rg_status$write_1__VAL_5;
  wire [63 : 0] MUX_rg_addr1$write_1__VAL_2,
		MUX_rg_addr3$write_1__VAL_2,
		MUX_rg_b1$write_1__VAL_1,
		MUX_rg_b2$write_1__VAL_1,
		MUX_rg_b3$write_1__VAL_1,
		MUX_rg_b4$write_1__VAL_1;
  wire MUX_fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$write_1__SEL_1,
       MUX_fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$write_1__SEL_1,
       MUX_fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$write_1__SEL_1,
       MUX_fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$write_1__SEL_1,
       MUX_fsm_encrypt_decrypt_start_reg$write_1__SEL_1,
       MUX_fsm_key_expand_start_reg$write_1__SEL_1,
       MUX_fsm_key_expand_state_mkFSMstate$write_1__SEL_1,
       MUX_rg_cmd$write_1__SEL_2,
       MUX_rg_status$write_1__SEL_3,
       MUX_rg_status$write_1__SEL_6,
       MUX_rg_status$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1326;
  reg [31 : 0] v__h1490;
  reg [31 : 0] v__h1242;
  reg [31 : 0] v__h1892;
  reg [31 : 0] v__h2403;
  reg [31 : 0] v__h1816;
  reg [31 : 0] v__h99641;
  reg [31 : 0] v__h23699;
  reg [31 : 0] v__h100015;
  reg [31 : 0] v__h1236;
  reg [31 : 0] v__h1320;
  reg [31 : 0] v__h1484;
  reg [31 : 0] v__h1810;
  reg [31 : 0] v__h1886;
  reg [31 : 0] v__h2397;
  reg [31 : 0] v__h23693;
  reg [31 : 0] v__h99635;
  reg [31 : 0] v__h100009;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] y_avValue_snd__h1611;
  wire [127 : 0] IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546,
		 x__h89652;
  wire [63 : 0] data___1__h1391, data___1__h1405, limit_addr__h55, x__h1672;
  wire IF_f_cmd_first__61_EQ_1_62_THEN_fsm_key_expand_ETC___d773,
       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_RDY_encrypt_r_ETC___d605,
       NOT_f_slave_rd_reqs_first_ULT_rg_base_addr_5_A_ETC___d36,
       NOT_f_slave_wr_reqs_first__9_BITS_127_TO_64_3__ETC___d142,
       NOT_f_slave_wr_reqs_first__9_BITS_66_TO_64_0_E_ETC___d95,
       NOT_fsm_encrypt_decrypt_par_blocks_1_abort_wha_ETC___d728,
       NOT_fsm_encrypt_decrypt_par_blocks_2_abort_wha_ETC___d718,
       NOT_fsm_encrypt_decrypt_par_blocks_3_abort_wha_ETC___d709,
       NOT_fsm_encrypt_decrypt_par_blocks_abort_whas__ETC___d737,
       f_master_wr_reqs_i_notFull__30_AND_IF_rg_cmd_1_ETC___d535,
       f_slave_rd_reqs_first_ULT_rg_base_addr___d8,
       f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74,
       f_slave_wr_reqs_first__9_BITS_66_TO_64_0_EQ_0__ETC___d108,
       fsm_encrypt_decrypt_abort_whas__29_AND_fsm_enc_ETC___d757,
       fsm_encrypt_decrypt_par_blocks_1_abort_whas__7_ETC___d675,
       fsm_encrypt_decrypt_par_blocks_2_abort_whas__0_ETC___d668,
       fsm_encrypt_decrypt_par_blocks_3_abort_whas__3_ETC___d661,
       fsm_encrypt_decrypt_par_blocks_abort_whas__50__ETC___d682,
       fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492,
       fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524,
       fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595,
       fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639,
       fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d318,
       fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d764,
       fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d281,
       fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d310,
       fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d319,
       rg_b1_27_ULT_rg_n_blocks_8___d628,
       rg_b2_83_ULT_rg_n_blocks_8___d584,
       rg_b3_12_ULT_rg_n_blocks_8___d513,
       rg_b4_80_ULT_rg_n_blocks_8___d481,
       rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10,
       rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75;

  // action method init
  assign RDY_init = 1'd1 ;
  assign CAN_FIRE_init = 1'd1 ;
  assign WILL_FIRE_init = EN_init ;

  // action method slave_rd_request_put
  assign RDY_slave_rd_request_put = f_slave_rd_reqs$FULL_N ;
  assign CAN_FIRE_slave_rd_request_put = f_slave_rd_reqs$FULL_N ;
  assign WILL_FIRE_slave_rd_request_put = EN_slave_rd_request_put ;

  // actionvalue method slave_rd_response_get
  assign slave_rd_response_get = f_slave_rd_rsps$D_OUT ;
  assign RDY_slave_rd_response_get = f_slave_rd_rsps$EMPTY_N ;
  assign CAN_FIRE_slave_rd_response_get = f_slave_rd_rsps$EMPTY_N ;
  assign WILL_FIRE_slave_rd_response_get = EN_slave_rd_response_get ;

  // action method slave_wr_request_put
  assign RDY_slave_wr_request_put = f_slave_wr_reqs$FULL_N ;
  assign CAN_FIRE_slave_wr_request_put = f_slave_wr_reqs$FULL_N ;
  assign WILL_FIRE_slave_wr_request_put = EN_slave_wr_request_put ;

  // actionvalue method slave_wr_response_get
  assign slave_wr_response_get = f_slave_wr_rsps$D_OUT ;
  assign RDY_slave_wr_response_get = f_slave_wr_rsps$EMPTY_N ;
  assign CAN_FIRE_slave_wr_response_get = f_slave_wr_rsps$EMPTY_N ;
  assign WILL_FIRE_slave_wr_response_get = EN_slave_wr_response_get ;

  // actionvalue method master_rd_request_get
  assign master_rd_request_get = f_master_rd_reqs$D_OUT ;
  assign RDY_master_rd_request_get = f_master_rd_reqs$EMPTY_N ;
  assign CAN_FIRE_master_rd_request_get = f_master_rd_reqs$EMPTY_N ;
  assign WILL_FIRE_master_rd_request_get = EN_master_rd_request_get ;

  // action method master_rd_response_put
  assign RDY_master_rd_response_put = f_master_rd_rsps$FULL_N ;
  assign CAN_FIRE_master_rd_response_put = f_master_rd_rsps$FULL_N ;
  assign WILL_FIRE_master_rd_response_put = EN_master_rd_response_put ;

  // actionvalue method master_wr_request_get
  assign master_wr_request_get = f_master_wr_reqs$D_OUT ;
  assign RDY_master_wr_request_get = f_master_wr_reqs$EMPTY_N ;
  assign CAN_FIRE_master_wr_request_get = f_master_wr_reqs$EMPTY_N ;
  assign WILL_FIRE_master_wr_request_get = EN_master_wr_request_get ;

  // action method master_wr_response_put
  assign RDY_master_wr_response_put = f_master_wr_rsps$FULL_N ;
  assign CAN_FIRE_master_wr_response_put = f_master_wr_rsps$FULL_N ;
  assign WILL_FIRE_master_wr_response_put = EN_master_wr_response_put ;

  // submodule aes_e_d
  mkAES_Encrypt_Decrypt aes_e_d(.CLK(CLK),
				.RST_N(RST_N),
				.decrypt_request_put(aes_e_d$decrypt_request_put),
				.encrypt_request_put(aes_e_d$encrypt_request_put),
				.set_key_key(aes_e_d$set_key_key),
				.EN_set_key(aes_e_d$EN_set_key),
				.EN_encrypt_request_put(aes_e_d$EN_encrypt_request_put),
				.EN_encrypt_response_get(aes_e_d$EN_encrypt_response_get),
				.EN_decrypt_request_put(aes_e_d$EN_decrypt_request_put),
				.EN_decrypt_response_get(aes_e_d$EN_decrypt_response_get),
				.RDY_set_key(aes_e_d$RDY_set_key),
				.key_ready(aes_e_d$key_ready),
				.RDY_key_ready(),
				.RDY_encrypt_request_put(aes_e_d$RDY_encrypt_request_put),
				.encrypt_response_get(aes_e_d$encrypt_response_get),
				.RDY_encrypt_response_get(aes_e_d$RDY_encrypt_response_get),
				.RDY_decrypt_request_put(aes_e_d$RDY_decrypt_request_put),
				.decrypt_response_get(aes_e_d$decrypt_response_get),
				.RDY_decrypt_response_get(aes_e_d$RDY_decrypt_response_get));

  // submodule f_cmd
  FIFO2 #(.width(32'd2), .guarded(32'd1)) f_cmd(.RST(RST_N),
						.CLK(CLK),
						.D_IN(f_cmd$D_IN),
						.ENQ(f_cmd$ENQ),
						.DEQ(f_cmd$DEQ),
						.CLR(f_cmd$CLR),
						.D_OUT(f_cmd$D_OUT),
						.FULL_N(f_cmd$FULL_N),
						.EMPTY_N(f_cmd$EMPTY_N));

  // submodule f_master_rd_reqs
  FIFO2 #(.width(32'd64), .guarded(32'd1)) f_master_rd_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_master_rd_reqs$D_IN),
							    .ENQ(f_master_rd_reqs$ENQ),
							    .DEQ(f_master_rd_reqs$DEQ),
							    .CLR(f_master_rd_reqs$CLR),
							    .D_OUT(f_master_rd_reqs$D_OUT),
							    .FULL_N(f_master_rd_reqs$FULL_N),
							    .EMPTY_N(f_master_rd_reqs$EMPTY_N));

  // submodule f_master_rd_rsps
  FIFO2 #(.width(32'd129), .guarded(32'd1)) f_master_rd_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_master_rd_rsps$D_IN),
							     .ENQ(f_master_rd_rsps$ENQ),
							     .DEQ(f_master_rd_rsps$DEQ),
							     .CLR(f_master_rd_rsps$CLR),
							     .D_OUT(f_master_rd_rsps$D_OUT),
							     .FULL_N(f_master_rd_rsps$FULL_N),
							     .EMPTY_N(f_master_rd_rsps$EMPTY_N));

  // submodule f_master_wr_reqs
  FIFO2 #(.width(32'd192), .guarded(32'd1)) f_master_wr_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(f_master_wr_reqs$D_IN),
							     .ENQ(f_master_wr_reqs$ENQ),
							     .DEQ(f_master_wr_reqs$DEQ),
							     .CLR(f_master_wr_reqs$CLR),
							     .D_OUT(f_master_wr_reqs$D_OUT),
							     .FULL_N(f_master_wr_reqs$FULL_N),
							     .EMPTY_N(f_master_wr_reqs$EMPTY_N));

  // submodule f_master_wr_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_master_wr_rsps(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_master_wr_rsps$D_IN),
							   .ENQ(f_master_wr_rsps$ENQ),
							   .DEQ(f_master_wr_rsps$DEQ),
							   .CLR(f_master_wr_rsps$CLR),
							   .D_OUT(f_master_wr_rsps$D_OUT),
							   .FULL_N(f_master_wr_rsps$FULL_N),
							   .EMPTY_N(f_master_wr_rsps$EMPTY_N));

  // submodule f_slave_rd_reqs
  FIFO2 #(.width(32'd64), .guarded(32'd1)) f_slave_rd_reqs(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_slave_rd_reqs$D_IN),
							   .ENQ(f_slave_rd_reqs$ENQ),
							   .DEQ(f_slave_rd_reqs$DEQ),
							   .CLR(f_slave_rd_reqs$CLR),
							   .D_OUT(f_slave_rd_reqs$D_OUT),
							   .FULL_N(f_slave_rd_reqs$FULL_N),
							   .EMPTY_N(f_slave_rd_reqs$EMPTY_N));

  // submodule f_slave_rd_rsps
  FIFO2 #(.width(32'd65), .guarded(32'd1)) f_slave_rd_rsps(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(f_slave_rd_rsps$D_IN),
							   .ENQ(f_slave_rd_rsps$ENQ),
							   .DEQ(f_slave_rd_rsps$DEQ),
							   .CLR(f_slave_rd_rsps$CLR),
							   .D_OUT(f_slave_rd_rsps$D_OUT),
							   .FULL_N(f_slave_rd_rsps$FULL_N),
							   .EMPTY_N(f_slave_rd_rsps$EMPTY_N));

  // submodule f_slave_wr_reqs
  FIFO2 #(.width(32'd128), .guarded(32'd1)) f_slave_wr_reqs(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_slave_wr_reqs$D_IN),
							    .ENQ(f_slave_wr_reqs$ENQ),
							    .DEQ(f_slave_wr_reqs$DEQ),
							    .CLR(f_slave_wr_reqs$CLR),
							    .D_OUT(f_slave_wr_reqs$D_OUT),
							    .FULL_N(f_slave_wr_reqs$FULL_N),
							    .EMPTY_N(f_slave_wr_reqs$EMPTY_N));

  // submodule f_slave_wr_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_slave_wr_rsps(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(f_slave_wr_rsps$D_IN),
							  .ENQ(f_slave_wr_rsps$ENQ),
							  .DEQ(f_slave_wr_rsps$DEQ),
							  .CLR(f_slave_wr_rsps$CLR),
							  .D_OUT(f_slave_wr_rsps$D_OUT),
							  .FULL_N(f_slave_wr_rsps$FULL_N),
							  .EMPTY_N(f_slave_wr_rsps$EMPTY_N));

  // submodule f_tokens
  FIFO20 #(.guarded(32'd1)) f_tokens(.RST(RST_N),
				     .CLK(CLK),
				     .ENQ(f_tokens$ENQ),
				     .DEQ(f_tokens$DEQ),
				     .CLR(f_tokens$CLR),
				     .FULL_N(f_tokens$FULL_N),
				     .EMPTY_N(f_tokens$EMPTY_N));

  // rule RL_rl_rd_config
  assign CAN_FIRE_RL_rl_rd_config =
	     f_slave_rd_reqs$EMPTY_N && f_slave_rd_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_rd_config = CAN_FIRE_RL_rl_rd_config ;

  // rule RL_fsm_key_expand_restart
  assign CAN_FIRE_RL_fsm_key_expand_restart =
	     fsm_key_expand_start_reg_1 && !fsm_key_expand_state_fired ;
  assign WILL_FIRE_RL_fsm_key_expand_restart =
	     CAN_FIRE_RL_fsm_key_expand_restart ;

  // rule RL_fsm_key_expand_actionpar_run_l286c10
  assign CAN_FIRE_RL_fsm_key_expand_actionpar_run_l286c10 =
	     (fsm_key_expand_par_blocks_1_state_mkFSMstate != 3'd0 &&
	      fsm_key_expand_par_blocks_1_state_mkFSMstate != 3'd2 ||
	      fsm_key_expand_par_blocks_1_start_reg &&
	      !fsm_key_expand_par_blocks_1_state_fired ||
	      fsm_key_expand_par_blocks_start_reg &&
	      !fsm_key_expand_par_blocks_fired) &&
	     (fsm_key_expand_state_mkFSMstate == 3'd1 ||
	      fsm_key_expand_state_mkFSMstate == 3'd2) ;
  assign WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10 =
	     CAN_FIRE_RL_fsm_key_expand_actionpar_run_l286c10 ;

  // rule RL_fsm_key_expand_fsm_start
  assign CAN_FIRE_RL_fsm_key_expand_fsm_start =
	     (fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d318 ||
	      fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d319) &&
	     (!fsm_key_expand_start_reg_1 || fsm_key_expand_state_fired) &&
	     fsm_key_expand_start_reg ;
  assign WILL_FIRE_RL_fsm_key_expand_fsm_start =
	     CAN_FIRE_RL_fsm_key_expand_fsm_start ;

  // rule RL_fsm_key_expand_actionpar_start_l286c10
  assign CAN_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 =
	     fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d281 &&
	     (!fsm_key_expand_par_blocks_start_reg ||
	      fsm_key_expand_par_blocks_fired) &&
	     fsm_key_expand_start_wire$whas &&
	     (fsm_key_expand_state_mkFSMstate == 3'd0 ||
	      fsm_key_expand_state_mkFSMstate == 3'd1 ||
	      fsm_key_expand_state_mkFSMstate == 3'd2) ;
  assign WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 =
	     CAN_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 ;

  // rule RL_fsm_key_expand_idle_l286c10
  assign CAN_FIRE_RL_fsm_key_expand_idle_l286c10 =
	     fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d310 &&
	     fsm_key_expand_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_idle_l286c10 =
	     CAN_FIRE_RL_fsm_key_expand_idle_l286c10 ;

  // rule RL_fsm_key_expand_idle_l286c10_1
  assign CAN_FIRE_RL_fsm_key_expand_idle_l286c10_1 =
	     fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d310 &&
	     fsm_key_expand_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_fsm_key_expand_idle_l286c10_1 =
	     CAN_FIRE_RL_fsm_key_expand_idle_l286c10_1 ;

  // rule RL_fsm_key_expand_state_handle_abort
  assign CAN_FIRE_RL_fsm_key_expand_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_fsm_key_expand_state_handle_abort = 1'b0 ;

  // rule RL_fsm_key_expand_state_every
  assign CAN_FIRE_RL_fsm_key_expand_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_state_every = 1'd1 ;

  // rule RL_fsm_key_expand_par_blocks_restart
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_restart =
	     fsm_key_expand_par_blocks_start_reg &&
	     !fsm_key_expand_par_blocks_fired ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_restart =
	     CAN_FIRE_RL_fsm_key_expand_par_blocks_restart ;

  // rule RL_fsm_key_expand_action_l288c13
  assign CAN_FIRE_RL_fsm_key_expand_action_l288c13 =
	     f_master_rd_reqs$FULL_N &&
	     fsm_key_expand_par_blocks_start_wire$whas &&
	     fsm_key_expand_par_running$whas ;
  assign WILL_FIRE_RL_fsm_key_expand_action_l288c13 =
	     CAN_FIRE_RL_fsm_key_expand_action_l288c13 ;

  // rule RL_fsm_key_expand_par_blocks_1_restart
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_1_restart =
	     fsm_key_expand_par_blocks_1_start_reg &&
	     !fsm_key_expand_par_blocks_1_state_fired ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_1_restart =
	     CAN_FIRE_RL_fsm_key_expand_par_blocks_1_restart ;

  // rule RL_fsm_key_expand_idle_l295c13
  assign CAN_FIRE_RL_fsm_key_expand_idle_l295c13 =
	     !fsm_key_expand_par_blocks_1_start_wire$whas &&
	     fsm_key_expand_par_blocks_1_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_fsm_key_expand_idle_l295c13 =
	     CAN_FIRE_RL_fsm_key_expand_idle_l295c13 ;

  // rule RL_fsm_key_expand_par_blocks_1_state_handle_abort
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_1_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_1_state_handle_abort = 1'b0 ;

  // rule RL_fsm_encrypt_decrypt_restart
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_restart =
	     fsm_encrypt_decrypt_start_reg_1 &&
	     !fsm_encrypt_decrypt_state_fired ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_restart =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_restart ;

  // rule RL_fsm_encrypt_decrypt_action_l438c20
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l438c20 =
	     fsm_encrypt_decrypt_par_blocks_3_abort_whas__3_ETC___d661 &&
	     fsm_encrypt_decrypt_par_blocks_2_abort_whas__0_ETC___d668 &&
	     fsm_encrypt_decrypt_par_blocks_1_abort_whas__7_ETC___d675 &&
	     fsm_encrypt_decrypt_par_blocks_abort_whas__50__ETC___d682 &&
	     (fsm_encrypt_decrypt_state_mkFSMstate == 3'd1 ||
	      fsm_encrypt_decrypt_state_mkFSMstate == 3'd2) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_l438c20 &&
	     !WILL_FIRE_RL_rl_wr_config ;

  // rule RL_fsm_encrypt_decrypt_actionpar_run_l423c10
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 =
	     (NOT_fsm_encrypt_decrypt_par_blocks_3_abort_wha_ETC___d709 ||
	      NOT_fsm_encrypt_decrypt_par_blocks_2_abort_wha_ETC___d718 ||
	      NOT_fsm_encrypt_decrypt_par_blocks_1_abort_wha_ETC___d728 ||
	      NOT_fsm_encrypt_decrypt_par_blocks_abort_whas__ETC___d737) &&
	     (fsm_encrypt_decrypt_state_mkFSMstate == 3'd1 ||
	      fsm_encrypt_decrypt_state_mkFSMstate == 3'd2) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 ;

  // rule RL_fsm_encrypt_decrypt_fsm_start
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_fsm_start =
	     fsm_encrypt_decrypt_abort_whas__29_AND_fsm_enc_ETC___d757 &&
	     fsm_encrypt_decrypt_start_reg ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_fsm_start =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_fsm_start ;

  // rule RL_fsm_encrypt_decrypt_actionpar_start_l423c10
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 =
	     fsm_encrypt_decrypt_par_blocks_3_abort_whas__3_ETC___d661 &&
	     fsm_encrypt_decrypt_par_blocks_2_abort_whas__0_ETC___d668 &&
	     fsm_encrypt_decrypt_par_blocks_1_abort_whas__7_ETC___d675 &&
	     fsm_encrypt_decrypt_par_blocks_abort_whas__50__ETC___d682 &&
	     fsm_encrypt_decrypt_start_wire$whas &&
	     (fsm_encrypt_decrypt_state_mkFSMstate == 3'd0 ||
	      fsm_encrypt_decrypt_state_mkFSMstate == 3'd4) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;

  // rule RL_fsm_encrypt_decrypt_action_l408c67
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 =
	     f_master_wr_rsps$EMPTY_N &&
	     fsm_encrypt_decrypt_par_running$whas &&
	     rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	     (fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd1 ||
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd3) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 &&
	     !WILL_FIRE_RL_rl_wr_config ;

  // rule RL_fsm_encrypt_decrypt_action_f_update_l408c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 ;

  // rule __me_check_50
  assign CAN_FIRE___me_check_50 = 1'b1 ;
  assign WILL_FIRE___me_check_50 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_action_f_init_l380c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 ;

  // rule RL_fsm_encrypt_decrypt_action_l381c12
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 =
	     f_tokens$EMPTY_N &&
	     f_master_wr_reqs_i_notFull__30_AND_IF_rg_cmd_1_ETC___d535 &&
	     fsm_encrypt_decrypt_par_running$whas &&
	     rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	     (fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd2 ||
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd4) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ;

  // rule RL_fsm_encrypt_decrypt_action_f_update_l380c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 ;

  // rule __me_check_53
  assign CAN_FIRE___me_check_53 = 1'b1 ;
  assign WILL_FIRE___me_check_53 = 1'b1 ;

  // rule __me_check_54
  assign CAN_FIRE___me_check_54 = 1'b1 ;
  assign WILL_FIRE___me_check_54 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_action_l343c12
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 =
	     f_master_rd_rsps$EMPTY_N &&
	     (!f_master_rd_rsps$D_OUT[128] ||
	      IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_RDY_encrypt_r_ETC___d605) &&
	     fsm_encrypt_decrypt_par_running$whas &&
	     rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	     (fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd1 ||
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd3) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 &&
	     !WILL_FIRE_RL_fsm_key_expand_action_l297c16 &&
	     !WILL_FIRE_RL_rl_wr_config ;

  // rule RL_fsm_encrypt_decrypt_action_f_update_l342c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 ;

  // rule __me_check_57
  assign CAN_FIRE___me_check_57 = 1'b1 ;
  assign WILL_FIRE___me_check_57 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_action_f_init_l327c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 ;

  // rule RL_fsm_encrypt_decrypt_action_l328c12
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 =
	     f_master_rd_reqs$FULL_N &&
	     fsm_encrypt_decrypt_par_running$whas &&
	     rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	     (fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd2 ||
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd4) ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 &&
	     !WILL_FIRE_RL_fsm_key_expand_action_l288c13 ;

  // rule RL_fsm_encrypt_decrypt_action_f_update_l327c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 ;

  // rule __me_check_60
  assign CAN_FIRE___me_check_60 = 1'b1 ;
  assign WILL_FIRE___me_check_60 = 1'b1 ;

  // rule __me_check_61
  assign CAN_FIRE___me_check_61 = 1'b1 ;
  assign WILL_FIRE___me_check_61 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_idle_l422c7
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7 =
	     !fsm_encrypt_decrypt_start_wire$whas &&
	     fsm_encrypt_decrypt_state_mkFSMstate == 3'd4 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7 ;

  // rule RL_fsm_encrypt_decrypt_state_handle_abort
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_state_handle_abort = 1'b0 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_state_handle_abort = 1'b0 ;

  // rule RL_fsm_encrypt_decrypt_state_every
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_state_every = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_restart
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_restart =
	     fsm_encrypt_decrypt_par_blocks_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_state_fired ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_restart =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_restart ;

  // rule RL_fsm_encrypt_decrypt_action_l326c18
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l326c18 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l326c18 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ;

  // rule __me_check_59
  assign CAN_FIRE___me_check_59 = 1'b1 ;
  assign WILL_FIRE___me_check_59 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_idle_l425c33
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33 =
	     !rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	     !fsm_encrypt_decrypt_par_blocks_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33 ;

  // rule RL_fsm_encrypt_decrypt_idle_l425c33_1
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1 =
	     !rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	     !fsm_encrypt_decrypt_par_blocks_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd4 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_start_reg__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_start_reg__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_state_handle_abort
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_handle_abort =
	     1'b0 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_handle_abort =
	     1'b0 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_state_every
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_every = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_fired__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_state_fired__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_1_restart
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_restart =
	     fsm_encrypt_decrypt_par_blocks_1_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_1_state_fired ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_restart =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_restart ;

  // rule RL_fsm_encrypt_decrypt_action_f_init_l342c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l342c9 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l342c9 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 ;

  // rule __me_check_56
  assign CAN_FIRE___me_check_56 = 1'b1 ;
  assign WILL_FIRE___me_check_56 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_idle_l428c38
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38 =
	     !rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	     !fsm_encrypt_decrypt_par_blocks_1_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38 ;

  // rule RL_fsm_encrypt_decrypt_idle_l428c38_1
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1 =
	     !rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	     !fsm_encrypt_decrypt_par_blocks_1_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_1_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_start_reg__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_start_reg__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_1_state_handle_abort
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_handle_abort =
	     1'b0 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_handle_abort =
	     1'b0 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_1_state_every
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_every = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_1_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_fired__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_state_fired__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_2_restart
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_restart =
	     fsm_encrypt_decrypt_par_blocks_2_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_2_state_fired ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_restart =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_restart ;

  // rule RL_fsm_encrypt_decrypt_action_l379c18
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_l379c18 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_l379c18 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ;

  // rule __me_check_52
  assign CAN_FIRE___me_check_52 = 1'b1 ;
  assign WILL_FIRE___me_check_52 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_idle_l431c33
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33 =
	     !rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	     !fsm_encrypt_decrypt_par_blocks_2_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd2 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33 ;

  // rule RL_fsm_encrypt_decrypt_idle_l431c33_1
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1 =
	     !rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	     !fsm_encrypt_decrypt_par_blocks_2_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd4 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_2_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_start_reg__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_start_reg__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_2_state_handle_abort
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_handle_abort =
	     1'b0 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_handle_abort =
	     1'b0 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_2_state_every
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_every = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_2_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_fired__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_state_fired__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_3_restart
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_restart =
	     fsm_encrypt_decrypt_par_blocks_3_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_3_state_fired ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_restart =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_restart ;

  // rule RL_fsm_encrypt_decrypt_action_f_init_l408c9
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l408c9 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l408c9 =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 ;

  // rule __me_check_49
  assign CAN_FIRE___me_check_49 = 1'b1 ;
  assign WILL_FIRE___me_check_49 = 1'b1 ;

  // rule RL_fsm_encrypt_decrypt_idle_l434c38
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38 =
	     !rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	     !fsm_encrypt_decrypt_par_blocks_3_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38 ;

  // rule RL_fsm_encrypt_decrypt_idle_l434c38_1
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1 =
	     !rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	     !fsm_encrypt_decrypt_par_blocks_3_start_wire$whas &&
	     fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd3 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1 =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1 ;

  // rule RL_rl_wr_config
  assign CAN_FIRE_RL_rl_wr_config =
	     f_slave_wr_reqs$EMPTY_N && f_slave_wr_rsps$FULL_N &&
	     NOT_f_slave_wr_reqs_first__9_BITS_66_TO_64_0_E_ETC___d95 &&
	     rg_status != 4'd1 ;
  assign WILL_FIRE_RL_rl_wr_config = CAN_FIRE_RL_rl_wr_config ;

  // rule RL_rl_do_command
  assign CAN_FIRE_RL_rl_do_command =
	     f_cmd$EMPTY_N &&
	     IF_f_cmd_first__61_EQ_1_62_THEN_fsm_key_expand_ETC___d773 &&
	     fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d764 &&
	     fsm_encrypt_decrypt_abort_whas__29_AND_fsm_enc_ETC___d757 &&
	     !fsm_encrypt_decrypt_start_reg ;
  assign WILL_FIRE_RL_rl_do_command = CAN_FIRE_RL_rl_do_command ;

  // rule RL_fsm_key_expand_action_l297c16
  assign CAN_FIRE_RL_fsm_key_expand_action_l297c16 =
	     f_master_rd_rsps$EMPTY_N &&
	     (!f_master_rd_rsps$D_OUT[128] || aes_e_d$RDY_set_key) &&
	     fsm_key_expand_par_running$whas &&
	     fsm_key_expand_par_blocks_1_start_wire$whas &&
	     (fsm_key_expand_par_blocks_1_state_mkFSMstate == 3'd0 ||
	      fsm_key_expand_par_blocks_1_state_mkFSMstate == 3'd2) ;
  assign WILL_FIRE_RL_fsm_key_expand_action_l297c16 =
	     CAN_FIRE_RL_fsm_key_expand_action_l297c16 ;

  // rule RL_fsm_key_expand_action_l311c16
  assign CAN_FIRE_RL_fsm_key_expand_action_l311c16 =
	     aes_e_d$key_ready && fsm_key_expand_par_running$whas &&
	     fsm_key_expand_par_blocks_1_state_mkFSMstate == 3'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_action_l311c16 =
	     CAN_FIRE_RL_fsm_key_expand_action_l311c16 ;

  // rule __me_check_15
  assign CAN_FIRE___me_check_15 = 1'b1 ;
  assign WILL_FIRE___me_check_15 = 1'b1 ;

  // rule RL_fsm_key_expand_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_key_expand_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_start_reg__dreg_update = 1'd1 ;

  // rule RL_fsm_key_expand_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_key_expand_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_state_fired__dreg_update = 1'd1 ;

  // rule RL_fsm_key_expand_par_blocks_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_start_reg__dreg_update =
	     1'd1 ;

  // rule RL_fsm_key_expand_par_blocks_fired__dreg_update
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_fired__dreg_update = 1'd1 ;

  // rule RL_fsm_key_expand_par_blocks_1_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_1_start_reg__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_1_start_reg__dreg_update =
	     1'd1 ;

  // rule RL_fsm_key_expand_par_blocks_1_state_every
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_1_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_1_state_every = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_start_reg__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_start_reg__dreg_update = 1'd1 ;

  // rule RL_fsm_key_expand_par_blocks_1_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_key_expand_par_blocks_1_state_fired__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_key_expand_par_blocks_1_state_fired__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_state_fired__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_state_fired__dreg_update = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_3_start_reg__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_start_reg__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_start_reg__dreg_update =
	     1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_3_state_handle_abort
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_handle_abort =
	     1'b0 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_handle_abort =
	     1'b0 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_3_state_every
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_every = 1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_every = 1'd1 ;

  // rule RL_fsm_encrypt_decrypt_par_blocks_3_state_fired__dreg_update
  assign CAN_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_fired__dreg_update =
	     1'd1 ;
  assign WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_state_fired__dreg_update =
	     1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38 ;
  assign MUX_fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33 ;
  assign MUX_fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38 ;
  assign MUX_fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33 ;
  assign MUX_fsm_encrypt_decrypt_start_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_do_command &&
	     (f_cmd$D_OUT == 2'd2 || f_cmd$D_OUT == 2'd3) ;
  assign MUX_fsm_key_expand_start_reg$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_do_command && f_cmd$D_OUT == 2'd1 ;
  assign MUX_fsm_key_expand_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_fsm_key_expand_idle_l286c10_1 ||
	     WILL_FIRE_RL_fsm_key_expand_idle_l286c10 ;
  assign MUX_rg_cmd$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs_first__9_BITS_66_TO_64_0_EQ_0__ETC___d108 ;
  assign MUX_rg_status$write_1__SEL_3 =
	     WILL_FIRE_RL_fsm_key_expand_action_l297c16 &&
	     !f_master_rd_rsps$D_OUT[128] ;
  assign MUX_rg_status$write_1__SEL_6 =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 &&
	     !f_master_rd_rsps$D_OUT[128] ;
  assign MUX_rg_status$write_1__SEL_7 =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 &&
	     !f_master_wr_rsps$D_OUT ;
  assign MUX_rg_addr1$write_1__VAL_2 = rg_addr1 + 64'd16 ;
  assign MUX_rg_addr3$write_1__VAL_2 = rg_addr3 + 64'd16 ;
  assign MUX_rg_b1$write_1__VAL_1 = rg_b1 + 64'd1 ;
  assign MUX_rg_b2$write_1__VAL_1 = rg_b2 + 64'd1 ;
  assign MUX_rg_b3$write_1__VAL_1 = rg_b3 + 64'd1 ;
  assign MUX_rg_b4$write_1__VAL_1 = rg_b4 + 64'd1 ;
  always@(f_cmd$D_OUT)
  begin
    case (f_cmd$D_OUT)
      2'd0: MUX_rg_status$write_1__VAL_4 = 4'd10;
      2'd1, 2'd2, 2'd3: MUX_rg_status$write_1__VAL_4 = 4'd1;
    endcase
  end
  always@(f_slave_wr_reqs$D_OUT)
  begin
    case (f_slave_wr_reqs$D_OUT[63:0])
      64'd0, 64'd1, 64'd2, 64'd3: MUX_rg_status$write_1__VAL_5 = 4'd0;
      default: MUX_rg_status$write_1__VAL_5 = 4'd10;
    endcase
  end

  // inlined wires
  assign fsm_key_expand_start_wire$whas =
	     WILL_FIRE_RL_fsm_key_expand_fsm_start ||
	     WILL_FIRE_RL_fsm_key_expand_restart ;
  assign fsm_key_expand_par_running$whas =
	     WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10 ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 ;
  assign fsm_key_expand_par_blocks_start_wire$whas =
	     WILL_FIRE_RL_fsm_key_expand_par_blocks_restart ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 ;
  assign fsm_key_expand_par_blocks_1_start_wire$whas =
	     WILL_FIRE_RL_fsm_key_expand_par_blocks_1_restart ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 ;
  assign fsm_encrypt_decrypt_start_wire$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_fsm_start ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_restart ;
  assign fsm_encrypt_decrypt_par_running$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;
  assign fsm_encrypt_decrypt_par_blocks_start_wire$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_restart ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;
  assign fsm_encrypt_decrypt_par_blocks_1_start_wire$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_1_restart ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;
  assign fsm_encrypt_decrypt_par_blocks_2_start_wire$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_2_restart ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;
  assign fsm_encrypt_decrypt_par_blocks_3_start_wire$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_par_blocks_3_restart ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;
  assign fsm_key_expand_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_key_expand_idle_l286c10_1 ||
	     WILL_FIRE_RL_fsm_key_expand_idle_l286c10 ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10 ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 ;
  assign fsm_key_expand_par_blocks_1_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_key_expand_idle_l295c13 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l311c16 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l297c16 ;
  assign fsm_encrypt_decrypt_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ;
  assign fsm_encrypt_decrypt_par_blocks_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ;
  assign fsm_encrypt_decrypt_par_blocks_1_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 ;
  assign fsm_encrypt_decrypt_par_blocks_2_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ;
  assign fsm_encrypt_decrypt_par_blocks_3_state_set_pw$whas =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 ;

  // register fsm_encrypt_decrypt_par_blocks_1_start_reg
  assign fsm_encrypt_decrypt_par_blocks_1_start_reg$D_IN =
	     fsm_encrypt_decrypt_par_blocks_1_start_wire$whas ;
  assign fsm_encrypt_decrypt_par_blocks_1_start_reg$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_1_state_can_overlap
  assign fsm_encrypt_decrypt_par_blocks_1_state_can_overlap$D_IN =
	     fsm_encrypt_decrypt_par_blocks_1_state_set_pw$whas ||
	     fsm_encrypt_decrypt_par_blocks_1_state_can_overlap ;
  assign fsm_encrypt_decrypt_par_blocks_1_state_can_overlap$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_1_state_fired
  assign fsm_encrypt_decrypt_par_blocks_1_state_fired$D_IN =
	     fsm_encrypt_decrypt_par_blocks_1_state_set_pw$whas ;
  assign fsm_encrypt_decrypt_par_blocks_1_state_fired$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate
  always@(MUX_fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$write_1__SEL_1 or
	  fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$write_1__SEL_1:
	  fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN = 3'd0;
      fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595:
	  fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12:
	  fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9:
	  fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN = 3'd3;
      default: fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l428c38 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 ;

  // register fsm_encrypt_decrypt_par_blocks_2_start_reg
  assign fsm_encrypt_decrypt_par_blocks_2_start_reg$D_IN =
	     fsm_encrypt_decrypt_par_blocks_2_start_wire$whas ;
  assign fsm_encrypt_decrypt_par_blocks_2_start_reg$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_2_state_can_overlap
  assign fsm_encrypt_decrypt_par_blocks_2_state_can_overlap$D_IN =
	     fsm_encrypt_decrypt_par_blocks_2_state_set_pw$whas ||
	     fsm_encrypt_decrypt_par_blocks_2_state_can_overlap ;
  assign fsm_encrypt_decrypt_par_blocks_2_state_can_overlap$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_2_state_fired
  assign fsm_encrypt_decrypt_par_blocks_2_state_fired$D_IN =
	     fsm_encrypt_decrypt_par_blocks_2_state_set_pw$whas ;
  assign fsm_encrypt_decrypt_par_blocks_2_state_fired$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate
  always@(MUX_fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$write_1__SEL_1 or
	  fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$write_1__SEL_1:
	  fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN = 3'd0;
      fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524:
	  fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9:
	  fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12:
	  fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9:
	  fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN = 3'd4;
      default: fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l431c33 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 ;

  // register fsm_encrypt_decrypt_par_blocks_3_start_reg
  assign fsm_encrypt_decrypt_par_blocks_3_start_reg$D_IN =
	     fsm_encrypt_decrypt_par_blocks_3_start_wire$whas ;
  assign fsm_encrypt_decrypt_par_blocks_3_start_reg$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_3_state_can_overlap
  assign fsm_encrypt_decrypt_par_blocks_3_state_can_overlap$D_IN =
	     fsm_encrypt_decrypt_par_blocks_3_state_set_pw$whas ||
	     fsm_encrypt_decrypt_par_blocks_3_state_can_overlap ;
  assign fsm_encrypt_decrypt_par_blocks_3_state_can_overlap$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_3_state_fired
  assign fsm_encrypt_decrypt_par_blocks_3_state_fired$D_IN =
	     fsm_encrypt_decrypt_par_blocks_3_state_set_pw$whas ;
  assign fsm_encrypt_decrypt_par_blocks_3_state_fired$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate
  always@(MUX_fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$write_1__SEL_1 or
	  fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$write_1__SEL_1:
	  fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN = 3'd0;
      fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492:
	  fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67:
	  fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9:
	  fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN = 3'd3;
      default: fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l434c38 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 ;

  // register fsm_encrypt_decrypt_par_blocks_start_reg
  assign fsm_encrypt_decrypt_par_blocks_start_reg$D_IN =
	     fsm_encrypt_decrypt_par_blocks_start_wire$whas ;
  assign fsm_encrypt_decrypt_par_blocks_start_reg$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_state_can_overlap
  assign fsm_encrypt_decrypt_par_blocks_state_can_overlap$D_IN =
	     fsm_encrypt_decrypt_par_blocks_state_set_pw$whas ||
	     fsm_encrypt_decrypt_par_blocks_state_can_overlap ;
  assign fsm_encrypt_decrypt_par_blocks_state_can_overlap$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_state_fired
  assign fsm_encrypt_decrypt_par_blocks_state_fired$D_IN =
	     fsm_encrypt_decrypt_par_blocks_state_set_pw$whas ;
  assign fsm_encrypt_decrypt_par_blocks_state_fired$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_par_blocks_state_mkFSMstate
  always@(MUX_fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$write_1__SEL_1 or
	  fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$write_1__SEL_1:
	  fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN = 3'd0;
      fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639:
	  fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9:
	  fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12:
	  fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9:
	  fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN = 3'd4;
      default: fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33_1 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l425c33 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 ;

  // register fsm_encrypt_decrypt_start_reg
  assign fsm_encrypt_decrypt_start_reg$D_IN =
	     MUX_fsm_encrypt_decrypt_start_reg$write_1__SEL_1 ;
  assign fsm_encrypt_decrypt_start_reg$EN =
	     WILL_FIRE_RL_rl_do_command &&
	     (f_cmd$D_OUT == 2'd2 || f_cmd$D_OUT == 2'd3) ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_fsm_start ;

  // register fsm_encrypt_decrypt_start_reg_1
  assign fsm_encrypt_decrypt_start_reg_1$D_IN =
	     fsm_encrypt_decrypt_start_wire$whas ;
  assign fsm_encrypt_decrypt_start_reg_1$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_state_can_overlap
  assign fsm_encrypt_decrypt_state_can_overlap$D_IN =
	     fsm_encrypt_decrypt_state_set_pw$whas ||
	     fsm_encrypt_decrypt_state_can_overlap ;
  assign fsm_encrypt_decrypt_state_can_overlap$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_state_fired
  assign fsm_encrypt_decrypt_state_fired$D_IN =
	     fsm_encrypt_decrypt_state_set_pw$whas ;
  assign fsm_encrypt_decrypt_state_fired$EN = 1'd1 ;

  // register fsm_encrypt_decrypt_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7:
	  fsm_encrypt_decrypt_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10:
	  fsm_encrypt_decrypt_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10:
	  fsm_encrypt_decrypt_state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20:
	  fsm_encrypt_decrypt_state_mkFSMstate$D_IN = 3'd4;
      default: fsm_encrypt_decrypt_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_encrypt_decrypt_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_idle_l422c7 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_run_l423c10 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20 ;

  // register fsm_key_expand_par_blocks_1_start_reg
  assign fsm_key_expand_par_blocks_1_start_reg$D_IN =
	     fsm_key_expand_par_blocks_1_start_wire$whas ;
  assign fsm_key_expand_par_blocks_1_start_reg$EN = 1'd1 ;

  // register fsm_key_expand_par_blocks_1_state_can_overlap
  assign fsm_key_expand_par_blocks_1_state_can_overlap$D_IN =
	     fsm_key_expand_par_blocks_1_state_set_pw$whas ||
	     fsm_key_expand_par_blocks_1_state_can_overlap ;
  assign fsm_key_expand_par_blocks_1_state_can_overlap$EN = 1'd1 ;

  // register fsm_key_expand_par_blocks_1_state_fired
  assign fsm_key_expand_par_blocks_1_state_fired$D_IN =
	     fsm_key_expand_par_blocks_1_state_set_pw$whas ;
  assign fsm_key_expand_par_blocks_1_state_fired$EN = 1'd1 ;

  // register fsm_key_expand_par_blocks_1_state_mkFSMstate
  always@(WILL_FIRE_RL_fsm_key_expand_idle_l295c13 or
	  WILL_FIRE_RL_fsm_key_expand_action_l297c16 or
	  WILL_FIRE_RL_fsm_key_expand_action_l311c16)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_fsm_key_expand_idle_l295c13:
	  fsm_key_expand_par_blocks_1_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_fsm_key_expand_action_l297c16:
	  fsm_key_expand_par_blocks_1_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_key_expand_action_l311c16:
	  fsm_key_expand_par_blocks_1_state_mkFSMstate$D_IN = 3'd2;
      default: fsm_key_expand_par_blocks_1_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_key_expand_par_blocks_1_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_key_expand_idle_l295c13 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l297c16 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l311c16 ;

  // register fsm_key_expand_par_blocks_fired
  assign fsm_key_expand_par_blocks_fired$D_IN =
	     CAN_FIRE_RL_fsm_key_expand_action_l288c13 ;
  assign fsm_key_expand_par_blocks_fired$EN = 1'd1 ;

  // register fsm_key_expand_par_blocks_start_reg
  assign fsm_key_expand_par_blocks_start_reg$D_IN =
	     fsm_key_expand_par_blocks_start_wire$whas ;
  assign fsm_key_expand_par_blocks_start_reg$EN = 1'd1 ;

  // register fsm_key_expand_start_reg
  assign fsm_key_expand_start_reg$D_IN =
	     MUX_fsm_key_expand_start_reg$write_1__SEL_1 ;
  assign fsm_key_expand_start_reg$EN =
	     WILL_FIRE_RL_rl_do_command && f_cmd$D_OUT == 2'd1 ||
	     WILL_FIRE_RL_fsm_key_expand_fsm_start ;

  // register fsm_key_expand_start_reg_1
  assign fsm_key_expand_start_reg_1$D_IN = fsm_key_expand_start_wire$whas ;
  assign fsm_key_expand_start_reg_1$EN = 1'd1 ;

  // register fsm_key_expand_state_can_overlap
  assign fsm_key_expand_state_can_overlap$D_IN =
	     fsm_key_expand_state_set_pw$whas ||
	     fsm_key_expand_state_can_overlap ;
  assign fsm_key_expand_state_can_overlap$EN = 1'd1 ;

  // register fsm_key_expand_state_fired
  assign fsm_key_expand_state_fired$D_IN = fsm_key_expand_state_set_pw$whas ;
  assign fsm_key_expand_state_fired$EN = 1'd1 ;

  // register fsm_key_expand_state_mkFSMstate
  always@(MUX_fsm_key_expand_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 or
	  WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fsm_key_expand_state_mkFSMstate$write_1__SEL_1:
	  fsm_key_expand_state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10:
	  fsm_key_expand_state_mkFSMstate$D_IN = 3'd1;
      WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10:
	  fsm_key_expand_state_mkFSMstate$D_IN = 3'd2;
      default: fsm_key_expand_state_mkFSMstate$D_IN =
		   3'b010 /* unspecified value */ ;
    endcase
  end
  assign fsm_key_expand_state_mkFSMstate$EN =
	     WILL_FIRE_RL_fsm_key_expand_idle_l286c10_1 ||
	     WILL_FIRE_RL_fsm_key_expand_idle_l286c10 ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_start_l286c10 ||
	     WILL_FIRE_RL_fsm_key_expand_actionpar_run_l286c10 ;

  // register rg_addr1
  assign rg_addr1$D_IN =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ?
	       rg_src_addr :
	       MUX_rg_addr1$write_1__VAL_2 ;
  assign rg_addr1$EN =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ;

  // register rg_addr3
  assign rg_addr3$D_IN =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ?
	       rg_dst_addr :
	       MUX_rg_addr3$write_1__VAL_2 ;
  assign rg_addr3$EN =
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ;

  // register rg_b1
  assign rg_b1$D_IN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 ?
	       MUX_rg_b1$write_1__VAL_1 :
	       64'd0 ;
  assign rg_b1$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 ;

  // register rg_b2
  assign rg_b2$D_IN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 ?
	       MUX_rg_b2$write_1__VAL_1 :
	       64'd0 ;
  assign rg_b2$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 ;

  // register rg_b3
  assign rg_b3$D_IN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 ?
	       MUX_rg_b3$write_1__VAL_1 :
	       64'd0 ;
  assign rg_b3$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 ;

  // register rg_b4
  assign rg_b4$D_IN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 ?
	       MUX_rg_b4$write_1__VAL_1 :
	       64'd0 ;
  assign rg_b4$EN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 ||
	     fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 ;

  // register rg_base_addr
  assign rg_base_addr$D_IN = init_base_addr ;
  assign rg_base_addr$EN = EN_init ;

  // register rg_buf2
  assign rg_buf2$D_IN = 128'h0 ;
  assign rg_buf2$EN = 1'b0 ;

  // register rg_cmd
  assign rg_cmd$D_IN = EN_init ? 2'd0 : f_slave_wr_reqs$D_OUT[1:0] ;
  assign rg_cmd$EN =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs_first__9_BITS_66_TO_64_0_EQ_0__ETC___d108 ||
	     EN_init ;

  // register rg_dst_addr
  assign rg_dst_addr$D_IN = f_slave_wr_reqs$D_OUT[63:0] ;
  assign rg_dst_addr$EN =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] == 3'd4 ;

  // register rg_key_addr
  assign rg_key_addr$D_IN = f_slave_wr_reqs$D_OUT[63:0] ;
  assign rg_key_addr$EN =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] == 3'd2 ;

  // register rg_n_blocks
  assign rg_n_blocks$D_IN = f_slave_wr_reqs$D_OUT[63:0] ;
  assign rg_n_blocks$EN =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] == 3'd5 ;

  // register rg_src_addr
  assign rg_src_addr$D_IN = f_slave_wr_reqs$D_OUT[63:0] ;
  assign rg_src_addr$EN =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] == 3'd3 ;

  // register rg_status
  always@(WILL_FIRE_RL_fsm_key_expand_action_l311c16 or
	  EN_init or
	  MUX_rg_status$write_1__SEL_3 or
	  WILL_FIRE_RL_rl_do_command or
	  MUX_rg_status$write_1__VAL_4 or
	  MUX_rg_cmd$write_1__SEL_2 or
	  MUX_rg_status$write_1__VAL_5 or
	  MUX_rg_status$write_1__SEL_6 or
	  MUX_rg_status$write_1__SEL_7 or
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20)
  case (1'b1)
    WILL_FIRE_RL_fsm_key_expand_action_l311c16 || EN_init:
	rg_status$D_IN = 4'd0;
    MUX_rg_status$write_1__SEL_3: rg_status$D_IN = 4'd11;
    WILL_FIRE_RL_rl_do_command: rg_status$D_IN = MUX_rg_status$write_1__VAL_4;
    MUX_rg_cmd$write_1__SEL_2: rg_status$D_IN = MUX_rg_status$write_1__VAL_5;
    MUX_rg_status$write_1__SEL_6 || MUX_rg_status$write_1__SEL_7:
	rg_status$D_IN = 4'd11;
    WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20: rg_status$D_IN = 4'd0;
    default: rg_status$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_status$EN =
	     (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 ||
	      WILL_FIRE_RL_fsm_key_expand_action_l297c16) &&
	     !f_master_rd_rsps$D_OUT[128] ||
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs_first__9_BITS_66_TO_64_0_EQ_0__ETC___d108 ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 &&
	     !f_master_wr_rsps$D_OUT ||
	     WILL_FIRE_RL_rl_do_command ||
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l311c16 ||
	     EN_init ;

  // submodule aes_e_d
  assign aes_e_d$decrypt_request_put =
	     { f_master_rd_rsps$D_OUT[7:0],
	       f_master_rd_rsps$D_OUT[15:8],
	       f_master_rd_rsps$D_OUT[23:16],
	       f_master_rd_rsps$D_OUT[31:24],
	       f_master_rd_rsps$D_OUT[39:32],
	       f_master_rd_rsps$D_OUT[47:40],
	       f_master_rd_rsps$D_OUT[55:48],
	       f_master_rd_rsps$D_OUT[63:56],
	       f_master_rd_rsps$D_OUT[71:64],
	       f_master_rd_rsps$D_OUT[79:72],
	       f_master_rd_rsps$D_OUT[87:80],
	       f_master_rd_rsps$D_OUT[95:88],
	       f_master_rd_rsps$D_OUT[103:96],
	       f_master_rd_rsps$D_OUT[111:104],
	       f_master_rd_rsps$D_OUT[119:112],
	       f_master_rd_rsps$D_OUT[127:120] } ;
  assign aes_e_d$encrypt_request_put = aes_e_d$decrypt_request_put ;
  assign aes_e_d$set_key_key = aes_e_d$decrypt_request_put ;
  assign aes_e_d$EN_set_key =
	     WILL_FIRE_RL_fsm_key_expand_action_l297c16 &&
	     f_master_rd_rsps$D_OUT[128] ;
  assign aes_e_d$EN_encrypt_request_put =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 &&
	     f_master_rd_rsps$D_OUT[128] &&
	     rg_cmd == 2'd2 ;
  assign aes_e_d$EN_encrypt_response_get =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 &&
	     rg_cmd == 2'd2 ;
  assign aes_e_d$EN_decrypt_request_put =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 &&
	     f_master_rd_rsps$D_OUT[128] &&
	     rg_cmd == 2'd3 ;
  assign aes_e_d$EN_decrypt_response_get =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 &&
	     rg_cmd != 2'd2 ;

  // submodule f_cmd
  assign f_cmd$D_IN = f_slave_wr_reqs$D_OUT[1:0] ;
  assign f_cmd$ENQ =
	     WILL_FIRE_RL_rl_wr_config &&
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] == 3'd0 &&
	     (f_slave_wr_reqs$D_OUT[63:0] == 64'd1 ||
	      f_slave_wr_reqs$D_OUT[63:0] == 64'd2 ||
	      f_slave_wr_reqs$D_OUT[63:0] == 64'd3) ;
  assign f_cmd$DEQ = CAN_FIRE_RL_rl_do_command ;
  assign f_cmd$CLR = EN_init ;

  // submodule f_master_rd_reqs
  assign f_master_rd_reqs$D_IN =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ?
	       rg_addr1 :
	       rg_key_addr ;
  assign f_master_rd_reqs$ENQ =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l288c13 ;
  assign f_master_rd_reqs$DEQ = EN_master_rd_request_get ;
  assign f_master_rd_reqs$CLR = EN_init ;

  // submodule f_master_rd_rsps
  assign f_master_rd_rsps$D_IN = master_rd_response_put ;
  assign f_master_rd_rsps$ENQ = EN_master_rd_response_put ;
  assign f_master_rd_rsps$DEQ =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 ||
	     WILL_FIRE_RL_fsm_key_expand_action_l297c16 ;
  assign f_master_rd_rsps$CLR = EN_init ;

  // submodule f_master_wr_reqs
  assign f_master_wr_reqs$D_IN = { rg_addr3, x__h89652 } ;
  assign f_master_wr_reqs$ENQ =
	     CAN_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ;
  assign f_master_wr_reqs$DEQ = EN_master_wr_request_get ;
  assign f_master_wr_reqs$CLR = EN_init ;

  // submodule f_master_wr_rsps
  assign f_master_wr_rsps$D_IN = master_wr_response_put ;
  assign f_master_wr_rsps$ENQ = EN_master_wr_response_put ;
  assign f_master_wr_rsps$DEQ =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 ;
  assign f_master_wr_rsps$CLR = EN_init ;

  // submodule f_slave_rd_reqs
  assign f_slave_rd_reqs$D_IN = slave_rd_request_put ;
  assign f_slave_rd_reqs$ENQ = EN_slave_rd_request_put ;
  assign f_slave_rd_reqs$DEQ = CAN_FIRE_RL_rl_rd_config ;
  assign f_slave_rd_reqs$CLR = EN_init ;

  // submodule f_slave_rd_rsps
  assign f_slave_rd_rsps$D_IN =
	     { f_slave_rd_reqs$D_OUT[2:0] == 3'd0 &&
	       !f_slave_rd_reqs_first_ULT_rg_base_addr___d8 &&
	       !rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10 &&
	       (f_slave_rd_reqs$D_OUT[5:3] == 3'd0 ||
		f_slave_rd_reqs$D_OUT[5:3] == 3'd1 ||
		f_slave_rd_reqs$D_OUT[5:3] == 3'd2 ||
		f_slave_rd_reqs$D_OUT[5:3] == 3'd3 ||
		f_slave_rd_reqs$D_OUT[5:3] == 3'd4 ||
		f_slave_rd_reqs$D_OUT[5:3] == 3'd5),
	       x__h1672 } ;
  assign f_slave_rd_rsps$ENQ = CAN_FIRE_RL_rl_rd_config ;
  assign f_slave_rd_rsps$DEQ = EN_slave_rd_response_get ;
  assign f_slave_rd_rsps$CLR = EN_init ;

  // submodule f_slave_wr_reqs
  assign f_slave_wr_reqs$D_IN = slave_wr_request_put ;
  assign f_slave_wr_reqs$ENQ = EN_slave_wr_request_put ;
  assign f_slave_wr_reqs$DEQ = CAN_FIRE_RL_rl_wr_config ;
  assign f_slave_wr_reqs$CLR = EN_init ;

  // submodule f_slave_wr_rsps
  assign f_slave_wr_rsps$D_IN =
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     (f_slave_wr_reqs$D_OUT[69:67] == 3'd0 ||
	      f_slave_wr_reqs$D_OUT[69:67] == 3'd1 ||
	      f_slave_wr_reqs$D_OUT[69:67] == 3'd2 ||
	      f_slave_wr_reqs$D_OUT[69:67] == 3'd3 ||
	      f_slave_wr_reqs$D_OUT[69:67] == 3'd4 ||
	      f_slave_wr_reqs$D_OUT[69:67] == 3'd5) ;
  assign f_slave_wr_rsps$ENQ = CAN_FIRE_RL_rl_wr_config ;
  assign f_slave_wr_rsps$DEQ = EN_slave_wr_response_get ;
  assign f_slave_wr_rsps$CLR = EN_init ;

  // submodule f_tokens
  assign f_tokens$ENQ =
	     WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 &&
	     f_master_rd_rsps$D_OUT[128] &&
	     (rg_cmd == 2'd2 || rg_cmd == 2'd3) ;
  assign f_tokens$DEQ = CAN_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ;
  assign f_tokens$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_f_cmd_first__61_EQ_1_62_THEN_fsm_key_expand_ETC___d773 =
	     (f_cmd$D_OUT == 2'd1) ?
	       fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d764 :
	       f_cmd$D_OUT != 2'd2 && f_cmd$D_OUT != 2'd3 ||
	       fsm_encrypt_decrypt_abort_whas__29_AND_fsm_enc_ETC___d757 &&
	       !fsm_encrypt_decrypt_start_reg ;
  assign IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_RDY_encrypt_r_ETC___d605 =
	     (rg_cmd == 2'd2) ?
	       aes_e_d$RDY_encrypt_request_put && f_tokens$FULL_N :
	       rg_cmd != 2'd3 ||
	       aes_e_d$RDY_decrypt_request_put && f_tokens$FULL_N ;
  assign IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546 =
	     (rg_cmd == 2'd2) ?
	       aes_e_d$encrypt_response_get :
	       aes_e_d$decrypt_response_get ;
  assign NOT_f_slave_rd_reqs_first_ULT_rg_base_addr_5_A_ETC___d36 =
	     !f_slave_rd_reqs_first_ULT_rg_base_addr___d8 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10 &&
	     f_slave_rd_reqs$D_OUT[5:3] != 3'd0 &&
	     f_slave_rd_reqs$D_OUT[5:3] != 3'd1 &&
	     f_slave_rd_reqs$D_OUT[5:3] != 3'd2 &&
	     f_slave_rd_reqs$D_OUT[5:3] != 3'd3 &&
	     f_slave_rd_reqs$D_OUT[5:3] != 3'd4 &&
	     f_slave_rd_reqs$D_OUT[5:3] != 3'd5 ;
  assign NOT_f_slave_wr_reqs_first__9_BITS_127_TO_64_3__ETC___d142 =
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd0 &&
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd1 &&
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd2 &&
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd3 &&
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd4 &&
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd5 ;
  assign NOT_f_slave_wr_reqs_first__9_BITS_66_TO_64_0_E_ETC___d95 =
	     f_slave_wr_reqs$D_OUT[66:64] != 3'd0 ||
	     f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 ||
	     rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 ||
	     f_slave_wr_reqs$D_OUT[69:67] != 3'd0 ||
	     f_slave_wr_reqs$D_OUT[63:0] != 64'd1 &&
	     f_slave_wr_reqs$D_OUT[63:0] != 64'd2 &&
	     f_slave_wr_reqs$D_OUT[63:0] != 64'd3 ||
	     f_cmd$FULL_N ;
  assign NOT_fsm_encrypt_decrypt_par_blocks_1_abort_wha_ETC___d728 =
	     fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate != 3'd0 &&
	     (rg_b2_83_ULT_rg_n_blocks_8___d584 ||
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate != 3'd1) &&
	     (rg_b2_83_ULT_rg_n_blocks_8___d584 ||
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate != 3'd3) ||
	     fsm_encrypt_decrypt_par_blocks_1_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_1_state_fired ;
  assign NOT_fsm_encrypt_decrypt_par_blocks_2_abort_wha_ETC___d718 =
	     fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate != 3'd0 &&
	     (rg_b3_12_ULT_rg_n_blocks_8___d513 ||
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate != 3'd2) &&
	     (rg_b3_12_ULT_rg_n_blocks_8___d513 ||
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate != 3'd4) ||
	     fsm_encrypt_decrypt_par_blocks_2_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_2_state_fired ;
  assign NOT_fsm_encrypt_decrypt_par_blocks_3_abort_wha_ETC___d709 =
	     fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate != 3'd0 &&
	     (rg_b4_80_ULT_rg_n_blocks_8___d481 ||
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate != 3'd1) &&
	     (rg_b4_80_ULT_rg_n_blocks_8___d481 ||
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate != 3'd3) ||
	     fsm_encrypt_decrypt_par_blocks_3_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_3_state_fired ;
  assign NOT_fsm_encrypt_decrypt_par_blocks_abort_whas__ETC___d737 =
	     fsm_encrypt_decrypt_par_blocks_state_mkFSMstate != 3'd0 &&
	     (rg_b1_27_ULT_rg_n_blocks_8___d628 ||
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate != 3'd2) &&
	     (rg_b1_27_ULT_rg_n_blocks_8___d628 ||
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate != 3'd4) ||
	     fsm_encrypt_decrypt_par_blocks_start_reg &&
	     !fsm_encrypt_decrypt_par_blocks_state_fired ;
  assign data___1__h1391 = { 62'd0, rg_cmd } ;
  assign data___1__h1405 = { 60'd0, rg_status } ;
  assign f_master_wr_reqs_i_notFull__30_AND_IF_rg_cmd_1_ETC___d535 =
	     f_master_wr_reqs$FULL_N &&
	     ((rg_cmd == 2'd2) ?
		aes_e_d$RDY_encrypt_response_get :
		aes_e_d$RDY_decrypt_response_get) ;
  assign f_slave_rd_reqs_first_ULT_rg_base_addr___d8 =
	     f_slave_rd_reqs$D_OUT < rg_base_addr ;
  assign f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 =
	     f_slave_wr_reqs$D_OUT[127:64] < rg_base_addr ;
  assign f_slave_wr_reqs_first__9_BITS_66_TO_64_0_EQ_0__ETC___d108 =
	     f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	     !f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 &&
	     !rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 &&
	     f_slave_wr_reqs$D_OUT[69:67] == 3'd0 ;
  assign fsm_encrypt_decrypt_abort_whas__29_AND_fsm_enc_ETC___d757 =
	     (fsm_encrypt_decrypt_state_mkFSMstate == 3'd0 ||
	      fsm_encrypt_decrypt_state_mkFSMstate == 3'd4) &&
	     (!fsm_encrypt_decrypt_start_reg_1 ||
	      fsm_encrypt_decrypt_state_fired) ;
  assign fsm_encrypt_decrypt_par_blocks_1_abort_whas__7_ETC___d675 =
	     (fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd0 ||
	      !rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd1 ||
	      !rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd3) &&
	     (!fsm_encrypt_decrypt_par_blocks_1_start_reg ||
	      fsm_encrypt_decrypt_par_blocks_1_state_fired) ;
  assign fsm_encrypt_decrypt_par_blocks_2_abort_whas__0_ETC___d668 =
	     (fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd0 ||
	      !rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd2 ||
	      !rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd4) &&
	     (!fsm_encrypt_decrypt_par_blocks_2_start_reg ||
	      fsm_encrypt_decrypt_par_blocks_2_state_fired) ;
  assign fsm_encrypt_decrypt_par_blocks_3_abort_whas__3_ETC___d661 =
	     (fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd0 ||
	      !rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd1 ||
	      !rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd3) &&
	     (!fsm_encrypt_decrypt_par_blocks_3_start_reg ||
	      fsm_encrypt_decrypt_par_blocks_3_state_fired) ;
  assign fsm_encrypt_decrypt_par_blocks_abort_whas__50__ETC___d682 =
	     (fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd0 ||
	      !rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd2 ||
	      !rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd4) &&
	     (!fsm_encrypt_decrypt_par_blocks_start_reg ||
	      fsm_encrypt_decrypt_par_blocks_state_fired) ;
  assign fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     (fsm_encrypt_decrypt_par_blocks_3_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd0 ||
	      !rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	      fsm_encrypt_decrypt_par_blocks_3_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd1 ||
	      !rg_b4_80_ULT_rg_n_blocks_8___d481 &&
	      fsm_encrypt_decrypt_par_blocks_3_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate == 3'd3) ;
  assign fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     (fsm_encrypt_decrypt_par_blocks_2_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd0 ||
	      !rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	      fsm_encrypt_decrypt_par_blocks_2_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd2 ||
	      !rg_b3_12_ULT_rg_n_blocks_8___d513 &&
	      fsm_encrypt_decrypt_par_blocks_2_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate == 3'd4) ;
  assign fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     (fsm_encrypt_decrypt_par_blocks_1_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd0 ||
	      !rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	      fsm_encrypt_decrypt_par_blocks_1_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd1 ||
	      !rg_b2_83_ULT_rg_n_blocks_8___d584 &&
	      fsm_encrypt_decrypt_par_blocks_1_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate == 3'd3) ;
  assign fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 =
	     fsm_encrypt_decrypt_par_running$whas &&
	     (fsm_encrypt_decrypt_par_blocks_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd0 ||
	      !rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	      fsm_encrypt_decrypt_par_blocks_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd2 ||
	      !rg_b1_27_ULT_rg_n_blocks_8___d628 &&
	      fsm_encrypt_decrypt_par_blocks_start_wire$whas &&
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate == 3'd4) ;
  assign fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d318 =
	     fsm_key_expand_state_mkFSMstate == 3'd0 ||
	     fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d281 &&
	     (!fsm_key_expand_par_blocks_start_reg ||
	      fsm_key_expand_par_blocks_fired) &&
	     fsm_key_expand_state_mkFSMstate == 3'd1 ;
  assign fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d764 =
	     (fsm_key_expand_abort_whas__58_AND_fsm_key_expa_ETC___d318 ||
	      fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d319) &&
	     (!fsm_key_expand_start_reg_1 || fsm_key_expand_state_fired) &&
	     !fsm_key_expand_start_reg ;
  assign fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d281 =
	     (fsm_key_expand_par_blocks_1_state_mkFSMstate == 3'd0 ||
	      fsm_key_expand_par_blocks_1_state_mkFSMstate == 3'd2) &&
	     (!fsm_key_expand_par_blocks_1_start_reg ||
	      fsm_key_expand_par_blocks_1_state_fired) ;
  assign fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d310 =
	     fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d281 &&
	     (!fsm_key_expand_par_blocks_start_reg ||
	      fsm_key_expand_par_blocks_fired) &&
	     !fsm_key_expand_start_wire$whas ;
  assign fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d319 =
	     fsm_key_expand_par_blocks_1_abort_whas__95_AND_ETC___d281 &&
	     (!fsm_key_expand_par_blocks_start_reg ||
	      fsm_key_expand_par_blocks_fired) &&
	     fsm_key_expand_state_mkFSMstate == 3'd2 ;
  assign limit_addr__h55 = rg_base_addr + 64'd48 ;
  assign rg_b1_27_ULT_rg_n_blocks_8___d628 = rg_b1 < rg_n_blocks ;
  assign rg_b2_83_ULT_rg_n_blocks_8___d584 = rg_b2 < rg_n_blocks ;
  assign rg_b3_12_ULT_rg_n_blocks_8___d513 = rg_b3 < rg_n_blocks ;
  assign rg_b4_80_ULT_rg_n_blocks_8___d481 = rg_b4 < rg_n_blocks ;
  assign rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10 =
	     limit_addr__h55 <= f_slave_rd_reqs$D_OUT ;
  assign rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75 =
	     limit_addr__h55 <= f_slave_wr_reqs$D_OUT[127:64] ;
  assign x__h1672 =
	     (f_slave_rd_reqs$D_OUT[2:0] != 3'd0 ||
	      f_slave_rd_reqs_first_ULT_rg_base_addr___d8 ||
	      rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10) ?
	       64'd0 :
	       y_avValue_snd__h1611 ;
  assign x__h89652 =
	     { IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[7:0],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[15:8],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[23:16],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[31:24],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[39:32],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[47:40],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[55:48],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[63:56],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[71:64],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[79:72],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[87:80],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[95:88],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[103:96],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[111:104],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[119:112],
	       IF_rg_cmd_1_EQ_2_31_THEN_aes_e_d_encrypt_respo_ETC___d546[127:120] } ;
  always@(f_slave_rd_reqs$D_OUT or
	  data___1__h1391 or
	  data___1__h1405 or
	  rg_key_addr or rg_src_addr or rg_dst_addr or rg_n_blocks)
  begin
    case (f_slave_rd_reqs$D_OUT[5:3])
      3'd0: y_avValue_snd__h1611 = data___1__h1391;
      3'd1: y_avValue_snd__h1611 = data___1__h1405;
      3'd2: y_avValue_snd__h1611 = rg_key_addr;
      3'd3: y_avValue_snd__h1611 = rg_src_addr;
      3'd4: y_avValue_snd__h1611 = rg_dst_addr;
      3'd5: y_avValue_snd__h1611 = rg_n_blocks;
      default: y_avValue_snd__h1611 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fsm_encrypt_decrypt_par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_encrypt_decrypt_par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	fsm_encrypt_decrypt_par_blocks_2_start_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_2_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_encrypt_decrypt_par_blocks_2_state_fired <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	fsm_encrypt_decrypt_par_blocks_3_start_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_3_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_encrypt_decrypt_par_blocks_3_state_fired <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	fsm_encrypt_decrypt_par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_encrypt_decrypt_par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY
	    1'd0;
	fsm_encrypt_decrypt_par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	fsm_encrypt_decrypt_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_encrypt_decrypt_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_encrypt_decrypt_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_encrypt_decrypt_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_encrypt_decrypt_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	fsm_key_expand_par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	fsm_key_expand_par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    3'd0;
	fsm_key_expand_par_blocks_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	fsm_key_expand_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fsm_key_expand_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
	rg_cmd <= `BSV_ASSIGNMENT_DELAY 2'd0;
	rg_status <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (fsm_encrypt_decrypt_par_blocks_1_start_reg$EN)
	  fsm_encrypt_decrypt_par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_1_start_reg$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_1_state_can_overlap$EN)
	  fsm_encrypt_decrypt_par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_1_state_can_overlap$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_1_state_fired$EN)
	  fsm_encrypt_decrypt_par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_1_state_fired$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$EN)
	  fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_2_start_reg$EN)
	  fsm_encrypt_decrypt_par_blocks_2_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_2_start_reg$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_2_state_can_overlap$EN)
	  fsm_encrypt_decrypt_par_blocks_2_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_2_state_can_overlap$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_2_state_fired$EN)
	  fsm_encrypt_decrypt_par_blocks_2_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_2_state_fired$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$EN)
	  fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_3_start_reg$EN)
	  fsm_encrypt_decrypt_par_blocks_3_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_3_start_reg$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_3_state_can_overlap$EN)
	  fsm_encrypt_decrypt_par_blocks_3_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_3_state_can_overlap$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_3_state_fired$EN)
	  fsm_encrypt_decrypt_par_blocks_3_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_3_state_fired$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$EN)
	  fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_start_reg$EN)
	  fsm_encrypt_decrypt_par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_start_reg$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_state_can_overlap$EN)
	  fsm_encrypt_decrypt_par_blocks_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_state_can_overlap$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_state_fired$EN)
	  fsm_encrypt_decrypt_par_blocks_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_state_fired$D_IN;
	if (fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$EN)
	  fsm_encrypt_decrypt_par_blocks_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_par_blocks_state_mkFSMstate$D_IN;
	if (fsm_encrypt_decrypt_start_reg$EN)
	  fsm_encrypt_decrypt_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_start_reg$D_IN;
	if (fsm_encrypt_decrypt_start_reg_1$EN)
	  fsm_encrypt_decrypt_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_start_reg_1$D_IN;
	if (fsm_encrypt_decrypt_state_can_overlap$EN)
	  fsm_encrypt_decrypt_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_state_can_overlap$D_IN;
	if (fsm_encrypt_decrypt_state_fired$EN)
	  fsm_encrypt_decrypt_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_state_fired$D_IN;
	if (fsm_encrypt_decrypt_state_mkFSMstate$EN)
	  fsm_encrypt_decrypt_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_encrypt_decrypt_state_mkFSMstate$D_IN;
	if (fsm_key_expand_par_blocks_1_start_reg$EN)
	  fsm_key_expand_par_blocks_1_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_par_blocks_1_start_reg$D_IN;
	if (fsm_key_expand_par_blocks_1_state_can_overlap$EN)
	  fsm_key_expand_par_blocks_1_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_par_blocks_1_state_can_overlap$D_IN;
	if (fsm_key_expand_par_blocks_1_state_fired$EN)
	  fsm_key_expand_par_blocks_1_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_par_blocks_1_state_fired$D_IN;
	if (fsm_key_expand_par_blocks_1_state_mkFSMstate$EN)
	  fsm_key_expand_par_blocks_1_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_par_blocks_1_state_mkFSMstate$D_IN;
	if (fsm_key_expand_par_blocks_fired$EN)
	  fsm_key_expand_par_blocks_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_par_blocks_fired$D_IN;
	if (fsm_key_expand_par_blocks_start_reg$EN)
	  fsm_key_expand_par_blocks_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_par_blocks_start_reg$D_IN;
	if (fsm_key_expand_start_reg$EN)
	  fsm_key_expand_start_reg <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_start_reg$D_IN;
	if (fsm_key_expand_start_reg_1$EN)
	  fsm_key_expand_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_start_reg_1$D_IN;
	if (fsm_key_expand_state_can_overlap$EN)
	  fsm_key_expand_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_state_can_overlap$D_IN;
	if (fsm_key_expand_state_fired$EN)
	  fsm_key_expand_state_fired <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_state_fired$D_IN;
	if (fsm_key_expand_state_mkFSMstate$EN)
	  fsm_key_expand_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      fsm_key_expand_state_mkFSMstate$D_IN;
	if (rg_cmd$EN) rg_cmd <= `BSV_ASSIGNMENT_DELAY rg_cmd$D_IN;
	if (rg_status$EN) rg_status <= `BSV_ASSIGNMENT_DELAY rg_status$D_IN;
      end
    if (rg_addr1$EN) rg_addr1 <= `BSV_ASSIGNMENT_DELAY rg_addr1$D_IN;
    if (rg_addr3$EN) rg_addr3 <= `BSV_ASSIGNMENT_DELAY rg_addr3$D_IN;
    if (rg_b1$EN) rg_b1 <= `BSV_ASSIGNMENT_DELAY rg_b1$D_IN;
    if (rg_b2$EN) rg_b2 <= `BSV_ASSIGNMENT_DELAY rg_b2$D_IN;
    if (rg_b3$EN) rg_b3 <= `BSV_ASSIGNMENT_DELAY rg_b3$D_IN;
    if (rg_b4$EN) rg_b4 <= `BSV_ASSIGNMENT_DELAY rg_b4$D_IN;
    if (rg_base_addr$EN)
      rg_base_addr <= `BSV_ASSIGNMENT_DELAY rg_base_addr$D_IN;
    if (rg_buf2$EN) rg_buf2 <= `BSV_ASSIGNMENT_DELAY rg_buf2$D_IN;
    if (rg_dst_addr$EN) rg_dst_addr <= `BSV_ASSIGNMENT_DELAY rg_dst_addr$D_IN;
    if (rg_key_addr$EN) rg_key_addr <= `BSV_ASSIGNMENT_DELAY rg_key_addr$D_IN;
    if (rg_n_blocks$EN) rg_n_blocks <= `BSV_ASSIGNMENT_DELAY rg_n_blocks$D_IN;
    if (rg_src_addr$EN) rg_src_addr <= `BSV_ASSIGNMENT_DELAY rg_src_addr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fsm_encrypt_decrypt_par_blocks_1_start_reg = 1'h0;
    fsm_encrypt_decrypt_par_blocks_1_state_can_overlap = 1'h0;
    fsm_encrypt_decrypt_par_blocks_1_state_fired = 1'h0;
    fsm_encrypt_decrypt_par_blocks_1_state_mkFSMstate = 3'h2;
    fsm_encrypt_decrypt_par_blocks_2_start_reg = 1'h0;
    fsm_encrypt_decrypt_par_blocks_2_state_can_overlap = 1'h0;
    fsm_encrypt_decrypt_par_blocks_2_state_fired = 1'h0;
    fsm_encrypt_decrypt_par_blocks_2_state_mkFSMstate = 3'h2;
    fsm_encrypt_decrypt_par_blocks_3_start_reg = 1'h0;
    fsm_encrypt_decrypt_par_blocks_3_state_can_overlap = 1'h0;
    fsm_encrypt_decrypt_par_blocks_3_state_fired = 1'h0;
    fsm_encrypt_decrypt_par_blocks_3_state_mkFSMstate = 3'h2;
    fsm_encrypt_decrypt_par_blocks_start_reg = 1'h0;
    fsm_encrypt_decrypt_par_blocks_state_can_overlap = 1'h0;
    fsm_encrypt_decrypt_par_blocks_state_fired = 1'h0;
    fsm_encrypt_decrypt_par_blocks_state_mkFSMstate = 3'h2;
    fsm_encrypt_decrypt_start_reg = 1'h0;
    fsm_encrypt_decrypt_start_reg_1 = 1'h0;
    fsm_encrypt_decrypt_state_can_overlap = 1'h0;
    fsm_encrypt_decrypt_state_fired = 1'h0;
    fsm_encrypt_decrypt_state_mkFSMstate = 3'h2;
    fsm_key_expand_par_blocks_1_start_reg = 1'h0;
    fsm_key_expand_par_blocks_1_state_can_overlap = 1'h0;
    fsm_key_expand_par_blocks_1_state_fired = 1'h0;
    fsm_key_expand_par_blocks_1_state_mkFSMstate = 3'h2;
    fsm_key_expand_par_blocks_fired = 1'h0;
    fsm_key_expand_par_blocks_start_reg = 1'h0;
    fsm_key_expand_start_reg = 1'h0;
    fsm_key_expand_start_reg_1 = 1'h0;
    fsm_key_expand_state_can_overlap = 1'h0;
    fsm_key_expand_state_fired = 1'h0;
    fsm_key_expand_state_mkFSMstate = 3'h2;
    rg_addr1 = 64'hAAAAAAAAAAAAAAAA;
    rg_addr3 = 64'hAAAAAAAAAAAAAAAA;
    rg_b1 = 64'hAAAAAAAAAAAAAAAA;
    rg_b2 = 64'hAAAAAAAAAAAAAAAA;
    rg_b3 = 64'hAAAAAAAAAAAAAAAA;
    rg_b4 = 64'hAAAAAAAAAAAAAAAA;
    rg_base_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_buf2 = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_cmd = 2'h2;
    rg_dst_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_key_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_n_blocks = 64'hAAAAAAAAAAAAAAAA;
    rg_src_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_status = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_config && f_slave_rd_reqs$D_OUT[2:0] == 3'd0 &&
	  (f_slave_rd_reqs_first_ULT_rg_base_addr___d8 ||
	   rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10))
	begin
	  v__h1326 = $stime;
	  #0;
	end
    v__h1320 = v__h1326 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_config && f_slave_rd_reqs$D_OUT[2:0] == 3'd0 &&
	  (f_slave_rd_reqs_first_ULT_rg_base_addr___d8 ||
	   rg_base_addr_PLUS_48_ULE_f_slave_rd_reqs_first___d10))
	$display("%0d:%m.rl_rd_config: ERROR: unknown addr 0x%08h",
		 v__h1320,
		 f_slave_rd_reqs$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_config && f_slave_rd_reqs$D_OUT[2:0] == 3'd0 &&
	  NOT_f_slave_rd_reqs_first_ULT_rg_base_addr_5_A_ETC___d36)
	begin
	  v__h1490 = $stime;
	  #0;
	end
    v__h1484 = v__h1490 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_config && f_slave_rd_reqs$D_OUT[2:0] == 3'd0 &&
	  NOT_f_slave_rd_reqs_first_ULT_rg_base_addr_5_A_ETC___d36)
	$display("%0d:%m.rl_rd_config: ERROR: unknown addr 0x%08h",
		 v__h1484,
		 f_slave_rd_reqs$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_config && f_slave_rd_reqs$D_OUT[2:0] != 3'd0)
	begin
	  v__h1242 = $stime;
	  #0;
	end
    v__h1236 = v__h1242 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rd_config && f_slave_rd_reqs$D_OUT[2:0] != 3'd0)
	$display("%0d:%m.rl_rd_config: ERROR: misaligned addr 0x%08h",
		 v__h1236,
		 f_slave_rd_reqs$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 &&
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9)
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 408, column 67: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_l408c67] and\n  [RL_fsm_encrypt_decrypt_action_f_update_l408c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 &&
	  (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9))
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 380, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_f_init_l380c9] and\n  [RL_fsm_encrypt_decrypt_action_l381c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l380c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 &&
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9)
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 381, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_l381c12] and\n  [RL_fsm_encrypt_decrypt_action_f_update_l380c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 &&
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9)
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 343, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_l343c12] and\n  [RL_fsm_encrypt_decrypt_action_f_update_l342c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 &&
	  (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9))
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 327, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_f_init_l327c9] and\n  [RL_fsm_encrypt_decrypt_action_l328c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l327c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 &&
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9)
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 328, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_l328c12] and\n  [RL_fsm_encrypt_decrypt_action_f_update_l327c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 &&
	  (WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9))
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 326, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_l326c18] and\n  [RL_fsm_encrypt_decrypt_action_f_init_l327c9,\n  RL_fsm_encrypt_decrypt_action_l328c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l327c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 &&
	  (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9))
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 342, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_f_init_l342c9] and\n  [RL_fsm_encrypt_decrypt_action_l343c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l342c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 &&
	  (WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9))
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 379, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_l379c18] and\n  [RL_fsm_encrypt_decrypt_action_f_init_l380c9,\n  RL_fsm_encrypt_decrypt_action_l381c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l380c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 &&
	  (WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9))
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 408, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_f_init_l408c9] and\n  [RL_fsm_encrypt_decrypt_action_l408c67,\n  RL_fsm_encrypt_decrypt_action_f_update_l408c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d492 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_l408c67 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l408c9 ||
	   fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d524 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l380c9 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_l381c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l380c9 ||
	   fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d595 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_l343c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l342c9 ||
	   fsm_encrypt_decrypt_par_running_whas__73_AND_f_ETC___d639 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_init_l327c9 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_l328c12 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_action_f_update_l327c9 ||
	   WILL_FIRE_RL_fsm_encrypt_decrypt_actionpar_start_l423c10) &&
	  WILL_FIRE_RL_fsm_encrypt_decrypt_action_l438c20)
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 408, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_encrypt_decrypt_action_f_init_l408c9,\n  RL_fsm_encrypt_decrypt_action_l408c67,\n  RL_fsm_encrypt_decrypt_action_f_update_l408c9,\n  RL_fsm_encrypt_decrypt_action_l379c18,\n  RL_fsm_encrypt_decrypt_action_f_init_l380c9,\n  RL_fsm_encrypt_decrypt_action_l381c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l380c9,\n  RL_fsm_encrypt_decrypt_action_f_init_l342c9,\n  RL_fsm_encrypt_decrypt_action_l343c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l342c9,\n  RL_fsm_encrypt_decrypt_action_l326c18,\n  RL_fsm_encrypt_decrypt_action_f_init_l327c9,\n  RL_fsm_encrypt_decrypt_action_l328c12,\n  RL_fsm_encrypt_decrypt_action_f_update_l327c9,\n  RL_fsm_encrypt_decrypt_actionpar_start_l423c10] and\n  [RL_fsm_encrypt_decrypt_action_l438c20] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_config && f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	  (f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 ||
	   rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75))
	begin
	  v__h1892 = $stime;
	  #0;
	end
    v__h1886 = v__h1892 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_config && f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	  (f_slave_wr_reqs_first__9_BITS_127_TO_64_3_ULT__ETC___d74 ||
	   rg_base_addr_PLUS_48_ULE_f_slave_wr_reqs_first_ETC___d75))
	$display("%0d:%m.rl_wr_config: ERROR: unknown addr 0x%08h",
		 v__h1886,
		 f_slave_wr_reqs$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_config && f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	  NOT_f_slave_wr_reqs_first__9_BITS_127_TO_64_3__ETC___d142)
	begin
	  v__h2403 = $stime;
	  #0;
	end
    v__h2397 = v__h2403 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_config && f_slave_wr_reqs$D_OUT[66:64] == 3'd0 &&
	  NOT_f_slave_wr_reqs_first__9_BITS_127_TO_64_3__ETC___d142)
	$display("%0d:%m.rl_wr_config: ERROR: unknown addr 0x%08h",
		 v__h2397,
		 f_slave_wr_reqs$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_config && f_slave_wr_reqs$D_OUT[66:64] != 3'd0)
	begin
	  v__h1816 = $stime;
	  #0;
	end
    v__h1810 = v__h1816 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_wr_config && f_slave_wr_reqs$D_OUT[66:64] != 3'd0)
	$display("%0d:%m.rl_wr_config: ERROR: misaligned addr 0x%08h",
		 v__h1810,
		 f_slave_wr_reqs$D_OUT[127:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_do_command && f_cmd$D_OUT != 2'd1 &&
	  f_cmd$D_OUT != 2'd2 &&
	  f_cmd$D_OUT != 2'd3)
	begin
	  v__h99641 = $stime;
	  #0;
	end
    v__h99635 = v__h99641 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_do_command && f_cmd$D_OUT != 2'd1 &&
	  f_cmd$D_OUT != 2'd2 &&
	  f_cmd$D_OUT != 2'd3)
	$display("%0d: %m.rl_do_command: unrecognized command %0d\n",
		 v__h99635,
		 f_cmd$D_OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_key_expand_action_l297c16 &&
	  !f_master_rd_rsps$D_OUT[128])
	begin
	  v__h23699 = $stime;
	  #0;
	end
    v__h23693 = v__h23699 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_key_expand_action_l297c16 &&
	  !f_master_rd_rsps$D_OUT[128])
	$display("%0d: %m.fsm_key_expand: mem response err", v__h23693);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_init)
	begin
	  v__h100015 = $stime;
	  #0;
	end
    v__h100009 = v__h100015 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_init)
	$display("%0d: %m.init: base_addr = 0x%0h",
		 v__h100009,
		 init_base_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_fsm_key_expand_action_l297c16 &&
	  WILL_FIRE_RL_fsm_key_expand_action_l311c16)
	$display("Error: \"src_Layer_1/Accel_AES.bsv\", line 297, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_fsm_key_expand_action_l297c16] and [RL_fsm_key_expand_action_l311c16] )\n  fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkAccel_AES

